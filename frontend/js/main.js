// === –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢ ===
class App {
    constructor() {
        this.currentPage = 'home';
        this.updateCheckInterval = null;
        this.isUpdating = false;
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.updateBugReportLink();
        this.startSystemChecks();
        this.startUpdateMonitoring();
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.getElementById('inventory-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('inventory-btn')) {
                this.navigateTo('inventory');
            }
        });
        
        document.getElementById('friend-error-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('friend-error-btn')) {
                this.navigateTo('friend-error');
            }
        });
        
        document.getElementById('substitution-btn')?.addEventListener('click', () => {
            this.navigateTo('substitution');
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        document.getElementById('changelog-btn')?.addEventListener('click', () => {
            this.showChangelog();
        });
    }
    
    isDisabled(buttonId) {
        return document.getElementById(buttonId)?.classList.contains('disabled');
    }
    
    navigateTo(page) {
        this.currentPage = page;
        this.updateBugReportLink();
        
        if (page === 'substitution') {
            window.substitutionModule.show();
        }
    }
    
    updateBugReportLink() {
        const bugBtn = document.getElementById('bug-report-btn');
        if (!bugBtn) return;
        
        const config = window.RkMConfig?.github;
        if (!config) return;
        
        const links = {
            'home': config.getIssueUrl('home'),
            'inventory': config.getIssueUrl('inventory'),
            'friend-error': config.getIssueUrl('friendError'),
            'substitution': config.getIssueUrl('substitution')
        };
        
        bugBtn.onclick = () => window.open(links[this.currentPage], '_blank');
    }
    
    showHomePage() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π
        const pages = document.querySelectorAll('.page:not(#home-page)');
        pages.forEach(page => page.remove());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const homePage = document.getElementById('home-page');
        if (homePage) {
            homePage.classList.add('active');
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentPage = 'home';
        this.updateBugReportLink();
    }
    
    showChangelog() {
        if (window.changelogModule) {
            window.changelogModule.show();
        } else {
            window.notifications?.error('–ú–æ–¥—É–ª—å –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    // === –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–ë–ù–û–í–õ–ï–ù–ò–ô ===
    startUpdateMonitoring() {
        const config = window.RkMConfig?.github;
        if (!config) {
            console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å rate limiting)
        this.updateCheckInterval = setInterval(() => {
            this.checkForUpdates();
        }, 120000);
        
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            this.checkForUpdates();
        }, 10000);
    }
    
    async checkForUpdates() {
        if (this.isUpdating) return;
        
        const config = window.RkMConfig?.github;
        if (!config) return;
        
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º random –ø–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            const randomParam = Math.random().toString(36).substring(7);
            const response = await fetch(`${config.apiUrl}/commits?per_page=1&_=${randomParam}`);
            
            // –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if (response.status === 404) {
                console.log(`üìã GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${config.owner}/${config.repo} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }
            
            // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            if (response.status === 403) {
                console.log('‚ö†Ô∏è GitHub API rate limit exceeded, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if (this.updateCheckInterval) {
                    clearInterval(this.updateCheckInterval);
                    this.updateCheckInterval = null;
                }
                return;
            }
            
            if (!response.ok) {
                throw new Error(`GitHub API error: ${response.status}`);
            }
            
            const commits = await response.json();
            
            if (commits && commits[0]) {
                const latestCommit = commits[0];
                const storedCommit = localStorage.getItem('rkm_last_commit');
                
                if (storedCommit && storedCommit !== latestCommit.sha) {
                    // –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!
                    console.log('üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç:', latestCommit.sha.substring(0, 7));
                    this.handleNewUpdate(latestCommit);
                    return;
                } else if (!storedCommit) {
                    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
                    localStorage.setItem('rkm_last_commit', latestCommit.sha);
                    console.log('üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç:', latestCommit.sha.substring(0, 7));
                }
            }
        } catch (error) {
            // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            console.log('üìã –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
        }
    }
    
    handleNewUpdate(commit) {
        this.isUpdating = true;
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.updateCheckInterval) {
            clearInterval(this.updateCheckInterval);
            this.updateCheckInterval = null;
        }
        
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å 5-—Å–µ–∫—É–Ω–¥–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º
        this.showUpdateWarning(() => {
            // –ü–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.showUpdatePage(commit);
        });
    }
    
    showUpdateWarning(callback) {
        let countdown = 5;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notificationId = window.notifications?.show(
            this.createCountdownHTML(countdown),
            'warning',
            0 // –ù–µ –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        );
        
        // –ó–≤—É–∫–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (window.soundSystem) {
            window.soundSystem.playWarning();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const timer = setInterval(() => {
            countdown--;
            
            const notification = document.getElementById(notificationId);
            if (notification) {
                const textEl = notification.querySelector('.notification-text');
                if (textEl) {
                    textEl.innerHTML = this.createCountdownHTML(countdown);
                }
            }
            
            if (countdown <= 0) {
                clearInterval(timer);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (notificationId) {
                    window.notifications?.hide(notificationId);
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º callback
                callback();
            }
        }, 1000);
    }
    
    createCountdownHTML(seconds) {
        return `
            <div style="text-align: center; font-size: 1.1rem;">
                <div style="font-weight: bold; margin-bottom: 8px;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</div>
                <div style="color: #ccc; margin-bottom: 8px;">–°–∞–π—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑:</div>
                <div style="font-size: 2rem; color: #ffc107; font-weight: bold; margin: 8px 0;">${seconds}</div>
                <div style="color: #888; font-size: 0.9rem;">–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</div>
            </div>
        `;
    }
    
    showUpdatePage(commit) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç
        localStorage.setItem('rkm_last_commit', commit.sha);
        
        document.body.innerHTML = `
            <!-- –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -->
            <button onclick="window.open('https://github.com/AmKilopa/RkM/issues/new?title=HPR', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
            <div id="notifications-container" class="notifications-container"></div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page update-page">
                <div class="main-container">
                    <div class="status-icon rotating">üîÑ</div>
                    <h1 class="main-title">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</h1>
                    <p class="update-message">üéµ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...</p>
                    
                    <div class="commit-info">
                        <h3>üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:</h3>
                        <div class="commit-message">${commit.commit.message}</div>
                        <div class="commit-details">
                            <span class="commit-author">üë§ ${commit.commit.author.name}</span>
                            <span class="commit-date">üìÖ ${new Date(commit.commit.author.date).toLocaleString('ru')}</span>
                        </div>
                        <div class="commit-sha">#${commit.sha.substring(0, 7)}</div>
                    </div>
                    
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p class="loading-text">–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º–µ–ª–æ–¥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...</p>
                    </div>
                    
                    <div class="auto-refresh">
                        üéµ –°–∞–π—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ <span id="countdown">30</span> —Å–µ–∫—É–Ω–¥
                    </div>
                </div>
            </div>
        `;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        this.reinitializeModules();
        
        // –°–†–ê–ó–£ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—É—é –º–µ–ª–æ–¥–∏—é –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let melodyIntervalId = null;
        if (window.soundSystem) {
            console.log('üéµ –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–ª–æ–¥–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            melodyIntervalId = window.soundSystem.startLoopingUpdateMelody();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä
        this.startSimpleCountdown(30, melodyIntervalId);
    }
    
    startSimpleCountdown(seconds, melodyIntervalId = null) {
        let remaining = seconds;
        const countdownEl = document.getElementById('countdown');
        
        const timer = setInterval(() => {
            remaining--;
            if (countdownEl) {
                countdownEl.textContent = remaining;
            }
            
            if (remaining <= 0) {
                clearInterval(timer);
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–ª–æ–¥–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
                if (melodyIntervalId && window.soundSystem) {
                    window.soundSystem.stopLoopingMelody(melodyIntervalId);
                }
                
                console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                window.location.reload();
            }
        }, 1000);
    }
    
    // === –û–°–ù–û–í–ù–´–ï –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===
    async startSystemChecks() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º backend —Å—Ç–∞—Ç—É—Å
        setTimeout(() => this.checkBackendStatus(), 2000);
    }
    
    async checkBackendStatus() {
        try {
            const connected = await window.api.testConnection();
            if (!connected) {
                this.showOfflinePage();
            }
        } catch (error) {
            this.showOfflinePage();
        }
    }
    
    // === OFFLINE –°–¢–†–ê–ù–ò–¶–ê ===
    showOfflinePage() {
        const config = window.RkMConfig?.github;
        const helpUrl = config ? config.getIssueUrl('helpBackend') : 'https://github.com/AmKilopa/RkM/issues/new?title=HBR';
        
        document.body.innerHTML = `
            <!-- –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -->
            <button onclick="window.open('${config ? config.getIssueUrl('home') : '#'}', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
            <div id="notifications-container" class="notifications-container"></div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page offline-page">
                <div class="main-container">
                    <h1 class="main-title">üì° –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>
                    <p class="offline-message">Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</p>
                    
                    <div class="offline-content">
                        <div class="offline-info">
                            <p>–ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ–ª–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É</p>
                        </div>
                        
                        <div class="buttons-container">
                            <button onclick="window.location.reload()" class="main-btn">
                                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                            <button onclick="window.open('${helpUrl}', '_blank')" class="main-btn">
                                üìù –ü–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É
                            </button>
                        </div>
                    </div>
                    
                    <div class="status-indicator">
                        <div class="pulse-dot offline"></div>
                        <span>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥</span>
                    </div>
                </div>
            </div>
        `;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        this.reinitializeModules();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(async () => {
            const connected = await window.api.testConnection();
            if (connected) {
                window.location.reload();
            }
        }, 10000);
    }
    
    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    reinitializeModules() {
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã DOM
        if (window.notifications) {
            window.notifications.updateContainer();
        }
        if (window.modals) {
            window.modals.setupEventListeners();
        }
        if (window.buttonSounds) {
            window.buttonSounds.addSoundsToButtons();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new App();
    console.log('üöÄ RkM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
});