// === –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö ===
class Settings {
    constructor() {
        this.currentSection = 'sound';
        this.developerPassword = null;
        this.isDeveloperUnlocked = false;
        this.sections = {
            'sound': {
                title: 'üîä –ó–≤—É–∫',
                icon: 'üéµ',
                active: true
            },
            'interface': {
                title: 'üñ•Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                icon: 'üé®',
                active: true
            },
            'performance': {
                title: '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                icon: '‚ö°',
                active: true
            },
            'developer': {
                title: 'üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                icon: 'üë®‚Äçüíª',
                active: true,
                requiresPassword: true
            }
        };
        
        this.settings = {
            animations: true,
            autoSave: true,
            notifications: true,
            compactMode: false,
            showTooltips: true,
            autoUpdate: true,
            performanceMode: false
        };
        
        this.loadSettings();
        this.loadDeveloperPassword();
        this.setupEventListeners();
    }
    
    async loadDeveloperPassword() {
        try {
            const response = await fetch('js/.env');
            const envText = await response.text();
            const lines = envText.split('\n');
            
            for (const line of lines) {
                if (line.startsWith('DEVELOPER_PASSWORD=')) {
                    this.developerPassword = line.split('=')[1].trim();
                    return;
                }
            }
        } catch (error) {
            // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
        }
        this.developerPassword = null;
    }
    
    loadSettings() {
        const saved = localStorage.getItem('rkm_settings');
        if (saved) {
            try {
                this.settings = { ...this.settings, ...JSON.parse(saved) };
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
    }
    
    saveSettings() {
        localStorage.setItem('rkm_settings', JSON.stringify(this.settings));
        this.applySettings();
    }
    
    applySettings() {
        if (!this.settings.animations) {
            document.body.classList.add('no-animations');
        } else {
            document.body.classList.remove('no-animations');
        }
        
        if (this.settings.compactMode) {
            document.body.classList.add('compact-mode');
        } else {
            document.body.classList.remove('compact-mode');
        }
        
        if (this.settings.performanceMode) {
            document.body.classList.add('performance-mode');
        } else {
            document.body.classList.remove('performance-mode');
        }
    }
    
    setupEventListeners() {
        const settingsBtn = document.getElementById('settings-btn');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => {
                this.openSettings();
            });
        }
        
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === ',') {
                e.preventDefault();
                this.openSettings();
            }
        });
    }
    
    openSettings() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ —É–∂–µ
        if (document.querySelector('.settings-modal')) {
            return;
        }
        
        const modal = this.createSettingsModal();
        document.body.appendChild(modal);
        
        setTimeout(() => {
            modal.classList.add('active');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–≤–µ—Ä–ª–µ—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeSettings();
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            const handleEsc = (e) => {
                if (e.key === 'Escape') {
                    this.closeSettings();
                    document.removeEventListener('keydown', handleEsc);
                }
            };
            document.addEventListener('keydown', handleEsc);
        }, 10);
        
        this.bindSettingsEvents();
        
        if (window.soundSystem) {
            window.soundSystem.playInterface();
        }
    }
    
    closeSettings() {
        const settingsModals = document.querySelectorAll('.settings-modal');
        settingsModals.forEach(modal => {
            modal.remove();
        });
        document.body.style.overflow = '';
    }
    
    createSettingsModal() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay settings-modal';
        modal.innerHTML = `
            <div class="modal">
                <div class="settings-header">
                    <h2 class="modal-title">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
                    <button class="modal-close" onclick="window.settings.closeSettings();">√ó</button>
                </div>
                
                <div class="settings-container">
                    <div class="settings-sidebar">
                        ${this.createSettingsSidebar()}
                    </div>
                    
                    <div class="settings-content">
                        ${this.createSettingsContent()}
                    </div>
                </div>
            </div>
        `;
        
        return modal;
    }
    
    createSettingsSidebar() {
        let html = '<div class="settings-tabs">';
        
        Object.entries(this.sections).forEach(([key, section]) => {
            if (section.active) {
                if (key === 'developer') {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –≤ .env
                    if (!this.developerPassword) {
                        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è
                    }
                    
                    if (!this.isDeveloperUnlocked) {
                        html += `
                            <button class="settings-tab developer-locked" 
                                    data-section="${key}"
                                    title="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è">
                                <span class="tab-icon">üîí</span>
                                <span class="tab-text">${section.title}</span>
                            </button>
                        `;
                    } else {
                        html += `
                            <button class="settings-tab developer-unlocked ${key === this.currentSection ? 'active' : ''}" 
                                    data-section="${key}">
                                <span class="tab-icon">üîì</span>
                                <span class="tab-text">${section.title}</span>
                            </button>
                        `;
                    }
                } else {
                    html += `
                        <button class="settings-tab ${key === this.currentSection ? 'active' : ''}" 
                                data-section="${key}">
                            <span class="tab-icon">${section.icon}</span>
                            <span class="tab-text">${section.title}</span>
                        </button>
                    `;
                }
            }
        });
        
        html += '</div>';
        return html;
    }
    
    createSettingsContent() {
        switch (this.currentSection) {
            case 'sound':
                return window.soundSettings ? window.soundSettings.createSoundSettingsUI() : this.createPlaceholder('–ó–≤—É–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
            case 'interface':
                return this.createInterfaceSettings();
            case 'performance':
                return this.createPerformanceSettings();
            case 'developer':
                return this.isDeveloperUnlocked ? this.createDeveloperSettings() : this.createPlaceholder('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
            default:
                return this.createPlaceholder('–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }
    
    createInterfaceSettings() {
        return `
            <div class="settings-section" id="interface-settings">
                <h3 class="settings-section-title">üñ•Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h3>
                
                <div class="setting-group">
                    <h4 class="setting-group-title">–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h4>
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ê–Ω–∏–º–∞—Ü–∏–∏</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="animations-enabled" ${this.settings.animations ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                        <p class="setting-description">–í–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã</p>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="compact-mode" ${this.settings.compactMode ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                        <p class="setting-description">–£–º–µ–Ω—å—à–∞–µ—Ç –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</p>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="show-tooltips" ${this.settings.showTooltips ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                        <p class="setting-description">–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏</p>
                    </div>
                </div>
                
                <div class="setting-group">
                    <h4 class="setting-group-title">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="notifications-enabled" ${this.settings.notifications ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                        <p class="setting-description">–í–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                    </div>
                </div>
            </div>
        `;
    }
    
    createPerformanceSettings() {
        return `
            <div class="settings-section" id="performance-settings">
                <h3 class="settings-section-title">‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                
                <div class="setting-group">
                    <h4 class="setting-group-title">–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</h4>
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="performance-mode" ${this.settings.performanceMode ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                        <p class="setting-description">–û—Ç–∫–ª—é—á–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</p>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="auto-save" ${this.settings.autoSave ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                        <p class="setting-description">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏</p>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="auto-update" ${this.settings.autoUpdate ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                        <p class="setting-description">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</p>
                    </div>
                </div>
            </div>
        `;
    }
    
    createDeveloperSettings() {
        return `
            <div class="settings-section" id="developer-settings">
                <h3 class="settings-section-title">üîß –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h3>
                
                <div class="setting-group">
                    <h4 class="setting-group-title">üß™ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
                    <div class="setting-item">
                        <div class="setting-label">
                            <span>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</span>
                            <button class="btn btn-warning" onclick="window.app.testUpdateSystem()">
                                üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                        </div>
                        <div class="setting-description">
                            –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–º–∏—Ç–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                        </div>
                    </div>
                    
                    <div class="setting-item">
                        <div class="setting-label">
                            <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</span>
                            <button class="btn btn-info" onclick="window.settings.showSystemInfo()">
                                ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å
                            </button>
                        </div>
                        <div class="setting-description">
                            –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Å–∏—Å—Ç–µ–º–µ
                        </div>
                    </div>
                </div>
                
                <div class="setting-group">
                    <h4 class="setting-group-title">üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h4>
                    <div class="setting-item">
                        <div class="setting-label">
                            <span>–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</span>
                            <button class="btn btn-secondary" onclick="window.settings.clearCache()">
                                üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
                            </button>
                        </div>
                        <div class="setting-description">
                            –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞
                        </div>
                    </div>
                    
                    <div class="setting-item">
                        <div class="setting-label">
                            <span>–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫</span>
                            <button class="btn btn-danger" onclick="window.settings.resetAllSettings()">
                                üî• –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
                            </button>
                        </div>
                        <div class="setting-description">
                            –£–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        </div>
                    </div>
                </div>
                
                <div class="setting-group">
                    <h4 class="setting-group-title">üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h4>
                    <div class="setting-item">
                        <div class="setting-label">
                            <span>–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</span>
                            <button class="btn btn-secondary" onclick="window.settings.lockDeveloper()">
                                üîí –í—ã–π—Ç–∏
                            </button>
                        </div>
                        <div class="setting-description">
                            –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    createPlaceholder(text) {
        return `
            <div class="settings-placeholder">
                <div class="placeholder-icon">‚öôÔ∏è</div>
                <div class="placeholder-text">${text}</div>
            </div>
        `;
    }
    
    bindSettingsEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.settings-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const section = e.currentTarget.dataset.section;
                
                if (section === 'developer' && !this.isDeveloperUnlocked) {
                    e.preventDefault();
                    e.stopPropagation();
                    this.promptDeveloperPassword();
                    return;
                }
                
                this.switchSection(section);
            });
        });
        
        // –ó–≤—É–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (window.soundSettings) {
            window.soundSettings.bindSoundSettingsEvents();
        }
        
        // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.bindGeneralSettings();
    }
    
    bindGeneralSettings() {
        const checkboxes = [
            'animations-enabled', 'compact-mode', 'show-tooltips', 
            'notifications-enabled', 'performance-mode', 'auto-save', 'auto-update'
        ];
        
        checkboxes.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('change', (e) => {
                    let settingKey = id.replace('-enabled', '').replace(/-([a-z])/g, (g) => g[1].toUpperCase());
                    this.setSetting(settingKey, e.target.checked);
                });
            }
        });
    }
    
    switchSection(section) {
        this.currentSection = section;
        
        document.querySelectorAll('.settings-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const targetTab = document.querySelector(`[data-section="${section}"]`);
        if (targetTab && !targetTab.classList.contains('developer-locked')) {
            targetTab.classList.add('active');
        }
        
        const content = document.querySelector('.settings-content');
        if (content) {
            content.innerHTML = this.createSettingsContent();
            this.bindSettingsEvents();
        }
    }
    
    promptDeveloperPassword() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        const passwordModal = `
            <div class="modal password-modal" style="z-index: 10000;">
                <div class="modal-header">
                    <h3 class="modal-title">üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h3>
                    <button onclick="window.modals.hide()" class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-container">
                        <div class="form-group">
                            <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
                            <input type="password" 
                                   id="modal-developer-password" 
                                   class="form-input" 
                                   placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
                                   autocomplete="off"
                                   autofocus>
                        </div>
                        
                        <div class="form-group" style="display: flex; gap: 1rem; justify-content: center;">
                            <button class="btn btn-primary" onclick="window.settings.checkModalPassword()">
                                üîì –í–æ–π—Ç–∏
                            </button>
                            <button class="btn btn-secondary" onclick="window.modals.hide()">
                                ‚ùå –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        window.modals.show(passwordModal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter
        setTimeout(() => {
            const input = document.getElementById('modal-developer-password');
            if (input) {
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        this.checkModalPassword();
                    }
                });
            }
        }, 100);
    }
    
    checkModalPassword() {
        const input = document.getElementById('modal-developer-password');
        if (input && input.value === this.developerPassword) {
            this.isDeveloperUnlocked = true;
            window.modals.hide();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä
            const sidebar = document.querySelector('.settings-sidebar');
            if (sidebar) {
                sidebar.innerHTML = this.createSettingsSidebar();
                this.bindSettingsEvents();
            }
            
            this.switchSection('developer');
            
            window.notifications?.success('üéâ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω!');
            if (window.soundSystem) {
                window.soundSystem.playSuccess();
            }
        } else {
            window.notifications?.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            if (window.soundSystem) {
                window.soundSystem.playError();
            }
        }
    }
    
    lockDeveloper() {
        this.isDeveloperUnlocked = false;
        this.switchSection('sound');
        
        const sidebar = document.querySelector('.settings-sidebar');
        if (sidebar) {
            sidebar.innerHTML = this.createSettingsSidebar();
            this.bindSettingsEvents();
        }
        
        window.notifications?.info('üîí –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    }
    
    setSetting(key, value) {
        if (this.settings.hasOwnProperty(key)) {
            this.settings[key] = value;
            this.saveSettings();
            return true;
        }
        return false;
    }
    
    getSetting(key) {
        return this.settings[key];
    }
    
    clearCache() {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?')) {
            sessionStorage.clear();
            window.notifications?.success('üßπ –ö—ç—à –æ—á–∏—â–µ–Ω');
        }
    }
    
    resetAllSettings() {
        if (confirm('–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
            localStorage.clear();
            sessionStorage.clear();
            window.notifications?.warning('üî• –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
            setTimeout(() => window.location.reload(), 1500);
        }
    }
    
    showSystemInfo() {
        const info = {
            'User Agent': navigator.userAgent,
            '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞': navigator.platform,
            '–Ø–∑—ã–∫': navigator.language,
            'Cookies': navigator.cookieEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã',
            '–û–Ω–ª–∞–π–Ω': navigator.onLine ? '–î–∞' : '–ù–µ—Ç',
            '–≠–∫—Ä–∞–Ω': `${screen.width}x${screen.height}`,
            'Viewport': `${window.innerWidth}x${window.innerHeight}`,
            'LocalStorage': window.localStorage ? '–î–æ—Å—Ç—É–ø–Ω–æ' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
            'SessionStorage': window.sessionStorage ? '–î–æ—Å—Ç—É–ø–Ω–æ' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        };
        
        const content = Object.entries(info)
            .map(([key, value]) => `<strong>${key}:</strong> ${value}`)
            .join('<br>');
            
        window.notifications?.info(`<div style="text-align: left; font-size: 0.9rem;">${content}</div>`, 10000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.settings = new Settings();