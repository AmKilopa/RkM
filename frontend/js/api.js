// === API –ö–õ–ò–ï–ù–¢ ===
class ApiClient {
    constructor() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        this.baseUrl = this.getBackendUrl();
        console.log('üîó API –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫:', this.baseUrl);
    }
    
    getBackendUrl() {
        // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ file:// (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
        if (window.location.protocol === 'file:') {
            return 'http://localhost:3000/api';
        }
        
        // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ live-server –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä
        const currentHost = window.location.host;
        if (currentHost.includes('localhost') || currentHost.includes('127.0.0.1')) {
            return 'http://localhost:3000/api';
        }
        
        // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (Netlify)
        return '/api';
    }
    
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const config = {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        };
        
        try {
            console.log(`üì° API –∑–∞–ø—Ä–æ—Å: ${config.method || 'GET'} ${url}`);
            const response = await fetch(url, config);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', data);
            return data;
            
        } catch (error) {
            console.error('‚ùå API –æ—à–∏–±–∫–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
            if (error.message.includes('fetch')) {
                window.notifications?.show('–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000', 'error');
            } else {
                window.notifications?.show('–û—à–∏–±–∫–∞ API: ' + error.message, 'error');
            }
            
            throw error;
        }
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–î–ú–ï–ù–´ ===
    async checkSystemHealth() {
        return this.request('/substitution/check-system', { method: 'POST' });
    }
    
    async startSubstitution(steamId) {
        return this.request('/substitution/start', {
            method: 'POST',
            body: JSON.stringify({ steamId })
        });
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ù–í–ï–ù–¢–ê–†–Ø ===
    async checkInventory(steamId) {
        return this.request('/inventory/check', {
            method: 'POST',
            body: JSON.stringify({ steamId })
        });
    }
    
    async validateSteamId(steamId) {
        return this.request('/inventory/validate-steamid', {
            method: 'POST',
            body: JSON.stringify({ steamId })
        });
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø FRIEND ERROR ===
    async generateFriendError(steamId) {
        return this.request('/friend-error/generate', {
            method: 'POST',
            body: JSON.stringify({ steamId })
        });
    }
    
    // === –¢–ï–°–¢–û–í–´–ô –ú–ï–¢–û–î ===
    async testConnection() {
        try {
            const response = await fetch(this.baseUrl.replace('/api', ''));
            if (response.ok) {
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å backend —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                return true;
            }
        } catch (error) {
            console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return false;
        }
        return false;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.api = new ApiClient();

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å backend...');
    const connected = await window.api.testConnection();
    
    if (!connected) {
        setTimeout(() => {
            window.notifications?.show(
                '–í–Ω–∏–º–∞–Ω–∏–µ: Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start –≤ –ø–∞–ø–∫–µ backend', 
                'warning', 
                10000
            );
        }, 2000);
    } else {
        console.log('‚úÖ Frontend –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }
});