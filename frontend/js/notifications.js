// === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
class NotificationSystem {
    constructor() {
        this.container = document.getElementById('notifications-container');
        this.notifications = new Map();
        this.counter = 0;
    }
    
    show(message, type = 'info', duration = 5000) {
        const id = `notification-${++this.counter}`;
        
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.id = id;
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon"></div>
                <div class="notification-text">${message}</div>
            </div>
            <button class="notification-close">&times;</button>
            <div class="notification-progress"></div>
        `;
        
        this.container.appendChild(notification);
        this.notifications.set(id, notification);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => notification.classList.add('show'), 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = notification.querySelector('.notification-close');
        closeBtn.onclick = () => this.hide(id);
        
        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => this.hide(id), duration);
        }
        
        // –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        this.playNotificationSound(type);
        
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type.toUpperCase()}]: ${message}`);
        
        return id;
    }
    
    hide(id) {
        const notification = this.notifications.get(id);
        if (!notification) return;
        
        notification.classList.remove('show');
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
            this.notifications.delete(id);
        }, 400);
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    success(message, duration = 4000) {
        return this.show(message, 'success', duration);
    }
    
    error(message, duration = 6000) {
        return this.show(message, 'error', duration);
    }
    
    info(message, duration = 5000) {
        return this.show(message, 'info', duration);
    }
    
    warning(message, duration = 5000) {
        return this.show(message, 'warning', duration);
    }
    
    // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    persistent(message, type = 'info') {
        return this.show(message, type, 0);
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    clear() {
        this.notifications.forEach((notification, id) => {
            this.hide(id);
        });
    }
    
    // –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    playNotificationSound(type) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
            if (typeof AudioContext !== 'undefined' && this.hasUserInteracted) {
                // –ü—Ä–æ—Å—Ç—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
                const frequencies = {
                    success: 800,
                    error: 300,
                    warning: 600,
                    info: 500
                };
                
                this.beep(frequencies[type] || 500, 150);
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ
        }
    }
    
    beep(frequency, duration) {
        try {
            const audioContext = new AudioContext();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = frequency;
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration / 1000);
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ
        }
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É–¥–∏–æ
    initUserInteraction() {
        const handler = () => {
            this.hasUserInteracted = true;
            document.removeEventListener('click', handler);
            document.removeEventListener('keydown', handler);
        };
        
        document.addEventListener('click', handler);
        document.addEventListener('keydown', handler);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
window.notifications = new NotificationSystem();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞—É–¥–∏–æ
document.addEventListener('DOMContentLoaded', () => {
    window.notifications.initUserInteraction();
    
    // –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        window.notifications.success('–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!', 3000);
    }, 1000);
});