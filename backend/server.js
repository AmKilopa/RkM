// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
class App {
    constructor() {
        this.currentPage = 'home';
        this.updateCheckInterval = null;
        this.isUpdating = false;
        this.backendCheckInterval = null;
        this.init();
    }
    
    init() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.checkRecentUpdate();
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞
        if (!window.api) {
            console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞...');
            setTimeout(() => this.init(), 100);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è GitHub API
        this.clearApiCache();
        
        this.setupEventListeners();
        this.updateBugReportLink();
        this.startUpdateMonitoring();
        this.checkBackendStatus();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    checkRecentUpdate() {
        try {
            const updateInfo = localStorage.getItem('rkm_update_detected');
            if (updateInfo) {
                const data = JSON.parse(updateInfo);
                const updateTime = new Date(data.timestamp);
                const now = new Date();
                const timeDiff = (now - updateTime) / 1000; // —Å–µ–∫—É–Ω–¥—ã
                
                console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–∞–≤–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
                console.log('‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateTime.toLocaleString());
                console.log('‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:', Math.round(timeDiff), '—Å–µ–∫—É–Ω–¥');
                
                // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º backend –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
                if (timeDiff < 300) { // 5 –º–∏–Ω—É—Ç
                    console.log('üö® –ù–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è backend');
                    this.isPostUpdateMode = true;
                    
                    // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    localStorage.removeItem('rkm_update_detected');
                    
                    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è backend
                    this.showBackendWaitingPage(data.commit);
                    return;
                }
            }
        } catch (e) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', e.message);
        }
        
        this.isPostUpdateMode = false;
    }
    
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–∂–∏–¥–∞–Ω–∏—è backend –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    showBackendWaitingPage(commit) {
        console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è backend –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        
        const config = window.RkMConfig?.github;
        const helpUrl = config ? config.getIssueUrl('helpBackend') : 'https://github.com/AmKilopa/RkM/issues/new?title=HBR';
        
        const commitMessage = commit.commit?.message || commit.message || '–ù–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
        const authorName = commit.commit?.author?.name || commit.author?.name || '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
        const shortSha = (commit.sha || commit.id || 'unknown').substring(0, 7);
        
        document.body.innerHTML = `
            <button onclick="window.open('${config ? config.getIssueUrl('home') : '#'}', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <div id="notifications-container" class="notifications-container"></div>
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page backend-waiting-page">
                <div class="main-container">
                    <div class="status-icon pulsing">‚ö°</div>
                    <h1 class="main-title">üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞</h1>
                    <p class="waiting-message">Backend –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...</p>
                    
                    <div class="commit-info">
                        <h3>üÜï –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</h3>
                        <div class="commit-message">${commitMessage}</div>
                        <div class="commit-details">
                            <span class="commit-author">üë§ ${authorName}</span>
                        </div>
                        <div class="commit-sha">#${shortSha}</div>
                    </div>
                    
                    <div class="backend-status">
                        <div class="loading-spinner"></div>
                        <p class="loading-text" id="backend-status-text">–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...</p>
                        <p style="font-size: 0.9rem; color: #888; margin-top: 0.5rem;">Backend: https://rkm-9vui.onrender.com</p>
                    </div>
                    
                    <div class="waiting-info">
                        <p>üîÑ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥</p>
                        <p style="font-size: 0.9rem; color: #666;">–û–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã</p>
                    </div>
                    
                    <div class="status-indicator">
                        <div class="pulse-dot waiting" id="status-dot"></div>
                        <span id="status-text">–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...</span>
                    </div>
                    
                    <div class="buttons-container" style="margin-top: 20px;">
                        <button onclick="window.location.reload()" class="main-btn secondary">
                            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
                        </button>
                        <button onclick="window.open('${helpUrl}', '_blank')" class="main-btn secondary">
                            üìù –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        this.reinitializeModules();
        this.startBackendWaitingCheck();
    }
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ backend –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    startBackendWaitingCheck() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É backend –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥');
        
        let checkCount = 0;
        const maxChecks = 72; // 6 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º (72 * 5 —Å–µ–∫—É–Ω–¥)
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.backendCheckInterval) {
            clearInterval(this.backendCheckInterval);
        }
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
        this.checkBackendForWaiting(checkCount, maxChecks);
        
        // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        this.backendCheckInterval = setInterval(() => {
            checkCount++;
            this.checkBackendForWaiting(checkCount, maxChecks);
        }, 5000);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
    async checkBackendForWaiting(checkCount, maxChecks) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ backend #${checkCount + 1}/${maxChecks}`);
        
        const statusText = document.getElementById('backend-status-text');
        const statusDot = document.getElementById('status-dot');
        const statusIndicator = document.getElementById('status-text');
        
        if (statusText) {
            statusText.textContent = `–ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount + 1} –∏–∑ ${maxChecks}...`;
        }
        
        try {
            const connected = await window.api.testConnection();
            
            if (connected) {
                console.log('‚úÖ Backend –∑–∞–ø—É—â–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if (statusText) statusText.textContent = '–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...';
                if (statusDot) {
                    statusDot.className = 'pulse-dot online';
                }
                if (statusIndicator) statusIndicator.textContent = '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                if (window.notifications) {
                    window.notifications.show('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...', 'success', 3000);
                }
                
                // –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                if (window.soundSystem) {
                    window.soundSystem.playSuccess();
                }
                
                // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if (this.backendCheckInterval) {
                    clearInterval(this.backendCheckInterval);
                    this.backendCheckInterval = null;
                }
                
                // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                setTimeout(() => {
                    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã');
                    window.location.reload();
                }, 2000);
                
                return;
            }
            
        } catch (error) {
            console.log(`‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
        }
        
        // Backend –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
        console.log(`‚è≥ Backend –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ ${checkCount + 1} –∏–∑ ${maxChecks}`);
        
        if (statusDot) {
            statusDot.className = 'pulse-dot waiting';
        }
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
        if (checkCount >= maxChecks - 1) {
            console.log('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è backend');
            
            if (statusText) statusText.textContent = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º.';
            if (statusDot) {
                statusDot.className = 'pulse-dot offline';
            }
            if (statusIndicator) statusIndicator.textContent = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
            
            // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if (this.backendCheckInterval) {
                clearInterval(this.backendCheckInterval);
                this.backendCheckInterval = null;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
            if (window.notifications) {
                window.notifications.show('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é.', 'error', 0);
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π offline —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            setTimeout(() => {
                this.showOfflinePage();
            }, 3000);
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ API –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    clearApiCache() {
        try {
            // –û—á–∏—â–∞–µ–º sessionStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const keysToRemove = [];
            for (let i = 0; i < sessionStorage.length; i++) {
                const key = sessionStorage.key(i);
                if (key && key.includes('github') || key && key.includes('api')) {
                    keysToRemove.push(key);
                }
            }
            keysToRemove.forEach(key => sessionStorage.removeItem(key));
            
            console.log('üßπ –ö–µ—à API –æ—á–∏—â–µ–Ω');
        } catch (e) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à:', e.message);
        }
    }
    
    setupEventListeners() {
        document.getElementById('inventory-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('inventory-btn')) {
                this.navigateTo('inventory');
            }
        });
        
        document.getElementById('friend-error-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('friend-error-btn')) {
                this.navigateTo('friend-error');
            }
        });
        
        document.getElementById('substitution-btn')?.addEventListener('click', () => {
            this.navigateTo('substitution');
        });
        
        document.getElementById('changelog-btn')?.addEventListener('click', () => {
            this.showChangelog();
        });
    }
    
    isDisabled(buttonId) {
        return document.getElementById(buttonId)?.classList.contains('disabled');
    }
    
    navigateTo(page) {
        this.currentPage = page;
        this.updateBugReportLink();
        
        if (page === 'substitution') {
            window.substitutionModule.show();
        }
    }
    
    updateBugReportLink() {
        const bugBtn = document.getElementById('bug-report-btn');
        if (!bugBtn) return;
        
        const config = window.RkMConfig?.github;
        if (!config) return;
        
        const links = {
            'home': config.getIssueUrl('home'),
            'inventory': config.getIssueUrl('inventory'),
            'friend-error': config.getIssueUrl('friendError'),
            'substitution': config.getIssueUrl('substitution')
        };
        
        bugBtn.onclick = () => window.open(links[this.currentPage], '_blank');
    }
    
    showHomePage() {
        const pages = document.querySelectorAll('.page:not(#home-page)');
        pages.forEach(page => page.remove());
        
        const homePage = document.getElementById('home-page');
        if (homePage) {
            homePage.classList.add('active');
        }
        
        this.currentPage = 'home';
        this.updateBugReportLink();
    }
    
    showChangelog() {
        if (window.changelogModule) {
            window.changelogModule.show();
        } else {
            window.notifications?.error('–ú–æ–¥—É–ª—å –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    startUpdateMonitoring() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        console.log('üîó Backend URL:', window.api?.baseUrl || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        
        // –û—á–∏—â–∞–µ–º localStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        try {
            const oldCommit = localStorage.getItem('rkm_last_commit');
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ backend, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:', oldCommit ? oldCommit.substring(0, 7) : 'none');
        } catch (e) {
            console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ webhook)
        this.updateCheckInterval = setInterval(() => {
            this.checkForUpdates();
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.checkForUpdates();
        }, 5000);
        
        console.log('‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ backend –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥, –ø–µ—Ä–≤–∞—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥');
    }
    
    async checkForUpdates() {
        if (this.isUpdating) {
            console.log('üîÑ –£–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
            return;
        }
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ backend...');
        console.log('üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toLocaleTimeString());
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ backend
            const result = await window.api.checkForUpdates();
            
            console.log('üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç backend:', JSON.stringify(result, null, 2));
            
            if (result && result.success && result.hasUpdate) {
                console.log('üÜï BACKEND –°–û–û–ë–©–ê–ï–¢ –û –ù–û–í–û–ú –û–ë–ù–û–í–õ–ï–ù–ò–ò!');
                console.log('üìù –î–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞:', result.latestCommit);
                console.log('üîî –ò—Å—Ç–æ—á–Ω–∏–∫:', result.source);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                try {
                    localStorage.setItem('rkm_update_detected', JSON.stringify({
                        timestamp: new Date().toISOString(),
                        commit: result.latestCommit
                    }));
                } catch (e) {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
                }
                
                this.handleNewUpdate(result.latestCommit);
                return;
            } else if (result && result.success) {
                console.log('‚úÖ –ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç');
                console.log('üìù –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç:', result.latestCommit?.sha?.substring(0, 7) || 'unknown');
                console.log('üîî –ò—Å—Ç–æ—á–Ω–∏–∫:', result.source);
            } else {
                console.log('‚ö†Ô∏è Backend –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result?.error || 'unknown error');
            }
            
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ backend:', error.message);
            
            // –ï—Å–ª–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ GitHub
            if (error.message.includes('404')) {
                console.log('üîÑ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É GitHub –Ω–∞–ø—Ä—è–º—É—é');
                await this.checkForUpdatesGitHub();
                return;
            }
            
            // –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö backend —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (this.updateCheckInterval) {
                clearInterval(this.updateCheckInterval);
            }
            
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ backend');
            this.updateCheckInterval = setInterval(() => {
                this.checkForUpdates();
            }, 900000); // 15 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        }
    }
    
    // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GitHub (–µ—Å–ª–∏ API –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    async checkForUpdatesGitHub() {
        console.log('üîç Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º GitHub –Ω–∞–ø—Ä—è–º—É—é...');
        
        const config = window.RkMConfig?.github;
        if (!config) {
            console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        try {
            const timestamp = Date.now();
            const randomParam = Math.random().toString(36).substring(7);
            const url = `${config.apiUrl}/commits?per_page=1&_t=${timestamp}&_r=${randomParam}`;
            
            console.log('üì° Fallback –∑–∞–ø—Ä–æ—Å –∫ GitHub API:', url);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/vnd.github.v3+json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                },
                cache: 'no-store'
            });
            
            console.log(`üìä GitHub API –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);
            
            if (response.status === 403) {
                console.log('‚ö†Ô∏è GitHub rate limit, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –ø—Ä–æ–≤–µ—Ä–∫–∏');
                return;
            }
            
            if (response.status === 404) {
                console.log('‚ùå GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            if (!response.ok) {
                throw new Error(`GitHub API error: ${response.status}`);
            }
            
            const commits = await response.json();
            
            if (commits && commits[0]) {
                const latestCommit = commits[0];
                console.log('üìå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç (GitHub):', latestCommit.sha.substring(0, 7));
                
                let storedCommit = null;
                try {
                    storedCommit = localStorage.getItem('rkm_last_commit');
                } catch (e) {
                    storedCommit = sessionStorage.getItem('rkm_last_commit');
                }
                
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç:', storedCommit ? storedCommit.substring(0, 7) : 'none');
                
                if (storedCommit && storedCommit !== latestCommit.sha) {
                    console.log('üÜï –ù–ê–ô–î–ï–ù –ù–û–í–´–ô –ö–û–ú–ú–ò–¢! (—á–µ—Ä–µ–∑ GitHub fallback)');
                    this.handleNewUpdate(latestCommit);
                    return;
                } else if (!storedCommit) {
                    try {
                        localStorage.setItem('rkm_last_commit', latestCommit.sha);
                    } catch (e) {
                        sessionStorage.setItem('rkm_last_commit', latestCommit.sha);
                    }
                    console.log('üìã –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–º–º–∏—Ç (GitHub)');
                } else {
                    console.log('‚úÖ –ù–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç (GitHub)');
                }
            }
            
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub:', error.message);
        }
    }
    
    handleNewUpdate(commit) {
        console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–¶–ï–î–£–†–£ –û–ë–ù–û–í–õ–ï–ù–ò–Ø (–¥–∞–Ω–Ω—ã–µ –æ—Ç backend)');
        console.log('üìù –ö–æ–º–º–∏—Ç:', commit.sha?.substring(0, 7) || 'unknown', '-', commit.commit?.message || commit.message || 'no message');
        
        this.isUpdating = true;
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.updateCheckInterval) {
            clearInterval(this.updateCheckInterval);
            this.updateCheckInterval = null;
            console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        
        console.log('‚è∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ...');
        
        this.showUpdateWarning(() => {
            console.log('‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            this.showUpdatePage(commit);
        });
    }
    
    showUpdateWarning(callback) {
        console.log('‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
        
        let countdown = 5;
        
        const notificationId = window.notifications?.show(
            this.createCountdownHTML(countdown),
            'warning',
            0 // –ù–µ –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        );
        
        console.log('üì¢ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationId);
        
        // –ó–≤—É–∫–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (window.soundSystem) {
            console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
            window.soundSystem.playWarning();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const timer = setInterval(() => {
            countdown--;
            console.log('‚è∞ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç:', countdown);
            
            const notification = document.getElementById(notificationId);
            if (notification) {
                const textEl = notification.querySelector('.notification-text');
                if (textEl) {
                    textEl.innerHTML = this.createCountdownHTML(countdown);
                }
            } else {
                console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
            }
            
            if (countdown <= 0) {
                clearInterval(timer);
                console.log('‚è∞ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
                
                // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (notificationId) {
                    window.notifications?.hide(notificationId);
                    console.log('üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ');
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º callback
                console.log('‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º callback');
                callback();
            }
        }, 1000);
    }
    
    createCountdownHTML(seconds) {
        return `
            <div style="text-align: center; font-size: 1.1rem;">
                <div style="font-weight: bold; margin-bottom: 8px;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</div>
                <div style="color: #ccc; margin-bottom: 8px;">–°–∞–π—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑:</div>
                <div style="font-size: 2rem; color: #ffc107; font-weight: bold; margin: 8px 0;">${seconds}</div>
                <div style="color: #888; font-size: 0.9rem;">–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</div>
            </div>
        `;
    }
    
    showUpdatePage(commit) {
        console.log('üìÑ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ –æ—Ç backend)');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç
        const commitSha = commit.sha || commit.id || 'unknown';
        try {
            localStorage.setItem('rkm_last_commit', commitSha);
            console.log('üíæ –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        } catch (e) {
            sessionStorage.setItem('rkm_last_commit', commitSha);
            console.log('üíæ –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ sessionStorage (fallback)');
        }
        
        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        try {
            const updateInfo = {
                timestamp: new Date().toISOString(),
                commit: {
                    sha: commitSha,
                    message: commit.commit?.message || commit.message || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç backend',
                    author: {
                        name: commit.commit?.author?.name || commit.author?.name || 'Backend',
                        date: commit.commit?.author?.date || commit.author?.date || new Date().toISOString()
                    }
                }
            };
            
            localStorage.setItem('rkm_update_detected', JSON.stringify(updateInfo));
            console.log('üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
        } catch (e) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–∞ –æ—Ç backend
        const commitMessage = commit.commit?.message || commit.message || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç backend';
        const authorName = commit.commit?.author?.name || commit.author?.name || 'Backend';
        const authorDate = commit.commit?.author?.date || commit.author?.date || new Date().toISOString();
        const shortSha = commitSha.substring(0, 7);
        
        document.body.innerHTML = `
            <button onclick="window.open('https://github.com/AmKilopa/RkM/issues/new?title=HPR', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <div id="notifications-container" class="notifications-container"></div>
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page update-page">
                <div class="main-container">
                    <div class="status-icon rotating">üîÑ</div>
                    <h1 class="main-title">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</h1>
                    <p class="update-message">üéµ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...</p>
                    
                    <div class="commit-info">
                        <h3>üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:</h3>
                        <div class="commit-message">${commitMessage}</div>
                        <div class="commit-details">
                            <span class="commit-author">üë§ ${authorName}</span>
                            <span class="commit-date">üìÖ ${new Date(authorDate).toLocaleString('ru')}</span>
                        </div>
                        <div class="commit-sha">#${shortSha}</div>
                    </div>
                    
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p class="loading-text">–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º–µ–ª–æ–¥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...</p>
                        <p style="font-size: 0.9rem; color: #888; margin-top: 0.5rem;">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ backend</p>
                        <p style="font-size: 0.8rem; color: #666; margin-top: 0.5rem;">–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω —Å—Ç–∞—Ç—É—Å backend</p>
                    </div>
                    
                    <div class="auto-refresh">
                        üéµ –°–∞–π—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ <span id="countdown">30</span> —Å–µ–∫—É–Ω–¥
                    </div>
                </div>
            </div>
        `;
        
        console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏');
        this.reinitializeModules();
        
        // –°–†–ê–ó–£ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—É—é –º–µ–ª–æ–¥–∏—é
        let melodyIntervalId = null;
        if (window.soundSystem) {
            console.log('üéµ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—É—é –º–µ–ª–æ–¥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            melodyIntervalId = window.soundSystem.startLoopingUpdateMelody();
        } else {
            console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä
        console.log('‚è≤Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
        this.startSimpleCountdown(30, melodyIntervalId);
    }
    
    // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    testUpdateSystem() {
        console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø (—á–µ—Ä–µ–∑ backend)');
        
        const fakeCommit = {
            sha: 'test1234567890abcdef',
            commit: {
                message: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ backend',
                author: {
                    name: 'Backend Test',
                    date: new Date().toISOString()
                }
            }
        };
        
        this.handleNewUpdate(fakeCommit);
    }
    
    startSimpleCountdown(seconds, melodyIntervalId = null) {
        let remaining = seconds;
        const countdownEl = document.getElementById('countdown');
        
        const timer = setInterval(() => {
            remaining--;
            if (countdownEl) {
                countdownEl.textContent = remaining;
            }
            
            if (remaining <= 0) {
                clearInterval(timer);
                
                if (melodyIntervalId && window.soundSystem) {
                    window.soundSystem.stopLoopingMelody(melodyIntervalId);
                }
                
                console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                window.location.reload();
            }
        }, 1000);
    }
    
    async checkBackendStatus() {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.isPostUpdateMode) {
            console.log('‚è≥ –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è backend –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É');
            return;
        }
        
        console.log('üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å backend:', window.api?.baseUrl || 'URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        
        try {
            const connected = await window.api.testConnection();
            if (!connected) {
                console.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                this.showOfflinePage();
            } else {
                console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ backend:', error.message);
            this.showOfflinePage();
        }
    }
    
    showOfflinePage() {
        const config = window.RkMConfig?.github;
        const helpUrl = config ? config.getIssueUrl('helpBackend') : 'https://github.com/AmKilopa/RkM/issues/new?title=HBR';
        
        console.log('üì¥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É (backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
        
        document.body.innerHTML = `
            <button onclick="window.open('${config ? config.getIssueUrl('home') : '#'}', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <div id="notifications-container" class="notifications-container"></div>
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page offline-page">
                <div class="main-container">
                    <h1 class="main-title">üì° –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>
                    <p class="offline-message">Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</p>
                    
                    <div class="offline-content">
                        <div class="offline-info">
                            <p>Backend: https://rkm-9vui.onrender.com</p>
                            <p>–ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ–ª–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É</p>
                        </div>
                        
                        <div class="buttons-container">
                            <button onclick="window.location.reload()" class="main-btn">
                                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                            <button onclick="window.open('${helpUrl}', '_blank')" class="main-btn">
                                üìù –ü–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É
                            </button>
                        </div>
                    </div>
                    
                    <div class="status-indicator">
                        <div class="pulse-dot offline"></div>
                        <span>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥</span>
                    </div>
                </div>
            </div>
        `;
        
        this.reinitializeModules();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤ –æ–±—ã—á–Ω–æ–º offline —Ä–µ–∂–∏–º–µ
        setInterval(async () => {
            console.log('üîÑ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ backend...');
            const connected = await window.api.testConnection();
            if (connected) {
                console.log('‚úÖ Backend –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                window.location.reload();
            }
        }, 10000);
    }
    
    reinitializeModules() {
        if (window.notifications) {
            window.notifications.updateContainer();
        }
        if (window.modals) {
            window.modals.setupEventListeners();
        }
        if (window.buttonSounds) {
            window.buttonSounds.addSoundsToButtons();
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
    destroy() {
        if (this.updateCheckInterval) {
            clearInterval(this.updateCheckInterval);
            this.updateCheckInterval = null;
        }
        if (this.backendCheckInterval) {
            clearInterval(this.backendCheckInterval);
            this.backendCheckInterval = null;
        }
    }
}