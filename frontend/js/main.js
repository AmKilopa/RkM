// === –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢ ===
class App {
    constructor() {
        this.currentPage = 'home';
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.updateBugReportLink();
        this.startSystemChecks();
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.getElementById('inventory-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('inventory-btn')) {
                this.navigateTo('inventory');
            }
        });
        
        document.getElementById('friend-error-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('friend-error-btn')) {
                this.navigateTo('friend-error');
            }
        });
        
        document.getElementById('substitution-btn')?.addEventListener('click', () => {
            this.navigateTo('substitution');
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        document.getElementById('changelog-btn')?.addEventListener('click', () => {
            this.showChangelog();
        });
    }
    
    isDisabled(buttonId) {
        return document.getElementById(buttonId)?.classList.contains('disabled');
    }
    
    navigateTo(page) {
        this.currentPage = page;
        this.updateBugReportLink();
        
        if (page === 'substitution') {
            window.substitutionModule.show();
        }
    }
    
    updateBugReportLink() {
        const bugBtn = document.getElementById('bug-report-btn');
        if (!bugBtn) return;
        
        const links = {
            'home': 'https://github.com/AmKilopa/RkM/issues/new?title=HPR',
            'inventory': 'https://github.com/AmKilopa/RkM/issues/new?title=ICR',
            'friend-error': 'https://github.com/AmKilopa/RkM/issues/new?title=FER',
            'substitution': 'https://github.com/AmKilopa/RkM/issues/new?title=SSR'
        };
        
        bugBtn.onclick = () => window.open(links[this.currentPage], '_blank');
    }
    
    showHomePage() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π
        const pages = document.querySelectorAll('.page:not(#home-page)');
        pages.forEach(page => page.remove());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const homePage = document.getElementById('home-page');
        if (homePage) {
            homePage.classList.add('active');
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentPage = 'home';
        this.updateBugReportLink();
    }
    
    showChangelog() {
        if (window.changelogModule) {
            window.changelogModule.show();
        } else {
            window.notifications?.error('–ú–æ–¥—É–ª—å –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    // === –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–û–ö ===
    async startSystemChecks() {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GitHub
        await this.checkForUpdates();
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
        setTimeout(() => this.checkBackendStatus(), 2000);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Netlify —Å—Ç–∞—Ç—É—Å
        setTimeout(() => this.checkNetlifyStatus(), 4000);
    }
    
    // === –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô GITHUB ===
    async checkForUpdates() {
        try {
            const response = await fetch('https://api.github.com/repos/AmKilopa/RkM/commits?per_page=1');
            const commits = await response.json();
            
            if (commits && commits[0]) {
                const latestCommit = commits[0];
                const storedCommit = localStorage.getItem('rkm_last_commit');
                
                if (storedCommit && storedCommit !== latestCommit.sha) {
                    // –ï—Å—Ç—å –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    this.showUpdatePage(latestCommit);
                    return;
                } else if (!storedCommit) {
                    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
                    localStorage.setItem('rkm_last_commit', latestCommit.sha);
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        }
    }
    
    // === –ü–†–û–í–ï–†–ö–ê BACKEND ===
    async checkBackendStatus() {
        try {
            const connected = await window.api.testConnection();
            if (!connected) {
                // Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.showOfflinePage();
            }
        } catch (error) {
            this.showOfflinePage();
        }
    }
    
    // === –ü–†–û–í–ï–†–ö–ê NETLIFY –°–¢–ê–¢–£–°–ê ===
    async checkNetlifyStatus() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è
            const response = await fetch(window.location.origin, { method: 'HEAD' });
            const deployState = response.headers.get('x-nf-request-id');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á—Ç–æ –∏–¥–µ—Ç —Å–±–æ—Ä–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–±–æ—Ä–∫–∏
            if (this.isNetlifyBuilding()) {
                this.showBuildingPage();
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Netlify
        }
    }
    
    isNetlifyBuilding() {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç preview –∏–ª–∏ deploy –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const url = window.location.href;
        return url.includes('deploy-preview') || url.includes('branch-deploy');
    }
    
    // === –°–¢–†–ê–ù–ò–¶–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===
    showUpdatePage(commit) {
        document.body.innerHTML = `
            <!-- –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -->
            <button onclick="window.open('https://github.com/AmKilopa/RkM/issues/new?title=HPR', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
            <div id="notifications-container" class="notifications-container"></div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page update-page">
                <div class="main-container">
                    <div class="status-icon rotating">üîÑ</div>
                    <h1 class="main-title">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</h1>
                    <p class="update-message">–ù–∞ —Å–∞–π—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è...</p>
                    
                    <div class="commit-info">
                        <h3>üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:</h3>
                        <div class="commit-message">${commit.commit.message}</div>
                        <div class="commit-details">
                            <span class="commit-author">üë§ ${commit.commit.author.name}</span>
                            <span class="commit-date">üìÖ ${new Date(commit.commit.author.date).toLocaleString('ru')}</span>
                        </div>
                        <div class="commit-sha">#${commit.sha.substring(0, 7)}</div>
                    </div>
                    
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p class="loading-text">–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏...</p>
                    </div>
                    
                    <div class="buttons-container">
                        <button onclick="window.location.reload()" class="main-btn">
                            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        </button>
                        <button onclick="localStorage.setItem('rkm_last_commit', '${commit.sha}'); window.location.reload()" class="main-btn secondary">
                            ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        </button>
                    </div>
                    
                    <div class="auto-refresh">
                        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ <span id="countdown">30</span> —Å–µ–∫—É–Ω–¥
                    </div>
                </div>
            </div>
        `;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        this.reinitializeModules();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        this.startCountdown(30);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            window.location.reload();
        }, 30000);
    }
    
    // === OFFLINE –°–¢–†–ê–ù–ò–¶–ê ===
    showOfflinePage() {
        document.body.innerHTML = `
            <!-- –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -->
            <button onclick="window.open('https://github.com/AmKilopa/RkM/issues/new?title=HPR', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
            <div id="notifications-container" class="notifications-container"></div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page offline-page">
                <div class="main-container">
                    <h1 class="main-title">üì° –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>
                    <p class="offline-message">Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</p>
                    
                    <div class="offline-content">
                        <div class="offline-info">
                            <p>–ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ–ª–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É</p>
                        </div>
                        
                        <div class="buttons-container">
                            <button onclick="window.location.reload()" class="main-btn">
                                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                            <button onclick="window.open('https://github.com/AmKilopa/RkM/issues/new?title=HBR', '_blank')" class="main-btn">
                                üìù –ü–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É
                            </button>
                        </div>
                    </div>
                    
                    <div class="status-indicator">
                        <div class="pulse-dot offline"></div>
                        <span>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥</span>
                    </div>
                </div>
            </div>
        `;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã DOM
        this.reinitializeModules();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(async () => {
            const connected = await window.api.testConnection();
            if (connected) {
                window.location.reload();
            }
        }, 10000);
    }
    
    // === –°–¢–†–ê–ù–ò–¶–ê –°–ë–û–†–ö–ò NETLIFY ===
    showBuildingPage() {
        document.body.innerHTML = `
            <!-- –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -->
            <button onclick="window.open('https://github.com/AmKilopa/RkM/issues/new?title=HPR', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
            <div id="notifications-container" class="notifications-container"></div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page building-page">
                <div class="main-container">
                    <div class="status-icon rotating">‚öôÔ∏è</div>
                    <h1 class="main-title">–°–±–æ—Ä–∫–∞ —Å–∞–π—Ç–∞</h1>
                    <p class="building-message">Netlify –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–ª–æ–π –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏...</p>
                    
                    <div class="build-progress">
                        <div class="build-step active">üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞</div>
                        <div class="build-step active">üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</div>
                        <div class="build-step">üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è</div>
                        <div class="build-step">‚úÖ –ì–æ—Ç–æ–≤–æ</div>
                    </div>
                    
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p class="loading-text">–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è...</p>
                    </div>
                    
                    <div class="buttons-container">
                        <button onclick="window.location.reload()" class="main-btn">
                            üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                        </button>
                        <button onclick="window.open('https://app.netlify.com', '_blank')" class="main-btn secondary">
                            üìä Netlify Dashboard
                        </button>
                    </div>
                    
                    <div class="auto-refresh">
                        –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                    </div>
                </div>
            </div>
        `;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        this.reinitializeModules();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            window.location.reload();
        }, 15000);
    }
    
    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    reinitializeModules() {
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã DOM
        if (window.notifications) {
            window.notifications.container = document.getElementById('notifications-container');
        }
        if (window.modals) {
            window.modals.overlay = document.getElementById('modal-overlay');
            window.modals.setupEventListeners();
        }
    }
    
    startCountdown(seconds) {
        let remaining = seconds;
        const countdownEl = document.getElementById('countdown');
        
        const timer = setInterval(() => {
            remaining--;
            if (countdownEl) {
                countdownEl.textContent = remaining;
            }
            
            if (remaining <= 0) {
                clearInterval(timer);
                window.location.reload();
            }
        }, 1000);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new App();
});