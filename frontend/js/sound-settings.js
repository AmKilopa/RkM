// === –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö –ó–í–£–ö–ê ===
class SoundSettings {
    constructor() {
        this.settings = {
            masterVolume: 1.0,
            soundEnabled: true,
            buttonSounds: true,
            notificationSounds: true,
            interfaceSounds: true,
            successSounds: true,
            errorSounds: true,
            warningSounds: true,
            backgroundMusic: false,
            backgroundMusicVolume: 0.3,
            soundPack: 'default' // default, retro, modern, minimal
        };
        
        this.loadSettings();
        this.setupEventListeners();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
    loadSettings() {
        const saved = localStorage.getItem('rkm_sound_settings');
        if (saved) {
            try {
                this.settings = { ...this.settings, ...JSON.parse(saved) };
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞:', e);
            }
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
    saveSettings() {
        localStorage.setItem('rkm_sound_settings', JSON.stringify(this.settings));
        this.applySettings();
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    applySettings() {
        if (window.soundSystem) {
            window.soundSystem.setMasterVolume(this.settings.masterVolume);
            window.soundSystem.setSoundEnabled(this.settings.soundEnabled);
            window.soundSystem.setBackgroundMusicVolume(this.settings.backgroundMusicVolume);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–≤—É–∫–æ–≤
            window.soundSystem.setCategoryEnabled('button', this.settings.buttonSounds);
            window.soundSystem.setCategoryEnabled('notification', this.settings.notificationSounds);
            window.soundSystem.setCategoryEnabled('interface', this.settings.interfaceSounds);
            window.soundSystem.setCategoryEnabled('success', this.settings.successSounds);
            window.soundSystem.setCategoryEnabled('error', this.settings.errorSounds);
            window.soundSystem.setCategoryEnabled('warning', this.settings.warningSounds);
            
            // –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
            if (this.settings.backgroundMusic) {
                window.soundSystem.startBackgroundMusic();
            } else {
                window.soundSystem.stopBackgroundMusic();
            }
            
            // –ù–∞–±–æ—Ä –∑–≤—É–∫–æ–≤
            window.soundSystem.setSoundPack(this.settings.soundPack);
        }
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        document.addEventListener('soundSystemReady', () => {
            this.applySettings();
        });
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ===
    
    setSetting(key, value) {
        if (this.settings.hasOwnProperty(key)) {
            this.settings[key] = value;
            this.saveSettings();
            return true;
        }
        return false;
    }
    
    getSetting(key) {
        return this.settings[key];
    }
    
    toggleSound() {
        this.settings.soundEnabled = !this.settings.soundEnabled;
        this.saveSettings();
        return this.settings.soundEnabled;
    }
    
    setMasterVolume(volume) {
        this.settings.masterVolume = Math.max(0, Math.min(1, volume));
        this.saveSettings();
    }
    
    resetToDefaults() {
        this.settings = {
            masterVolume: 1.0,
            soundEnabled: true,
            buttonSounds: true,
            notificationSounds: true,
            interfaceSounds: true,
            successSounds: true,
            errorSounds: true,
            warningSounds: true,
            backgroundMusic: false,
            backgroundMusicVolume: 0.3,
            soundPack: 'default'
        };
        this.saveSettings();
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
    createSoundSettingsUI() {
        return `
            <div class="settings-section" id="sound-settings">
                <h3 class="settings-section-title">üîä –ó–≤—É–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                
                <!-- –ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–≤—É–∫–∞ -->
                <div class="setting-group">
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="sound-enabled" ${this.settings.soundEnabled ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                </div>
                
                <!-- –û–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å -->
                <div class="setting-group">
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–û–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å</span>
                            <div class="volume-control">
                                <input type="range" id="master-volume" min="0" max="100" 
                                       value="${this.settings.masterVolume * 100}" 
                                       class="volume-slider">
                                <span class="volume-value">${Math.round(this.settings.masterVolume * 100)}%</span>
                            </div>
                        </label>
                    </div>
                </div>
                
                <!-- –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–æ–≤ -->
                <div class="setting-group">
                    <h4 class="setting-group-title">–¢–∏–ø—ã –∑–≤—É–∫–æ–≤</h4>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ó–≤—É–∫–∏ –∫–Ω–æ–ø–æ–∫</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="button-sounds" ${this.settings.buttonSounds ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ó–≤—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="notification-sounds" ${this.settings.notificationSounds ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ó–≤—É–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="interface-sounds" ${this.settings.interfaceSounds ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ó–≤—É–∫–∏ —É—Å–ø–µ—Ö–∞</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="success-sounds" ${this.settings.successSounds ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ó–≤—É–∫–∏ –æ—à–∏–±–æ–∫</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="error-sounds" ${this.settings.errorSounds ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ó–≤—É–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="warning-sounds" ${this.settings.warningSounds ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                </div>
                
                <!-- –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ -->
                <div class="setting-group">
                    <h4 class="setting-group-title">–§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞</h4>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–í–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É</span>
                            <div class="toggle-switch">
                                <input type="checkbox" id="background-music" ${this.settings.backgroundMusic ? 'checked' : ''}>
                                <span class="slider"></span>
                            </div>
                        </label>
                    </div>
                    
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏</span>
                            <div class="volume-control">
                                <input type="range" id="music-volume" min="0" max="100" 
                                       value="${this.settings.backgroundMusicVolume * 100}" 
                                       class="volume-slider">
                                <span class="volume-value">${Math.round(this.settings.backgroundMusicVolume * 100)}%</span>
                            </div>
                        </label>
                    </div>
                </div>
                
                <!-- –ù–∞–±–æ—Ä –∑–≤—É–∫–æ–≤ -->
                <div class="setting-group">
                    <div class="setting-item">
                        <label class="setting-label">
                            <span>–ù–∞–±–æ—Ä –∑–≤—É–∫–æ–≤</span>
                            <select id="sound-pack" class="setting-select">
                                <option value="default" ${this.settings.soundPack === 'default' ? 'selected' : ''}>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                                <option value="retro" ${this.settings.soundPack === 'retro' ? 'selected' : ''}>–†–µ—Ç—Ä–æ</option>
                                <option value="modern" ${this.settings.soundPack === 'modern' ? 'selected' : ''}>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π</option>
                                <option value="minimal" ${this.settings.soundPack === 'minimal' ? 'selected' : ''}>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π</option>
                            </select>
                        </label>
                    </div>
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                <div class="setting-actions">
                    <button class="btn btn-primary" onclick="window.soundSettings.testAllSounds()">
                        üéµ –¢–µ—Å—Ç –∑–≤—É–∫–æ–≤
                    </button>
                    <button class="btn btn-secondary" onclick="window.soundSettings.resetToDefaults()">
                        üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ UI —ç–ª–µ–º–µ–Ω—Ç–∞–º
    bindSoundSettingsEvents() {
        // –ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
        const soundEnabled = document.getElementById('sound-enabled');
        if (soundEnabled) {
            soundEnabled.addEventListener('change', (e) => {
                this.setSetting('soundEnabled', e.target.checked);
            });
        }
        
        // –û–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
        const masterVolume = document.getElementById('master-volume');
        if (masterVolume) {
            masterVolume.addEventListener('input', (e) => {
                const volume = e.target.value / 100;
                this.setSetting('masterVolume', volume);
                e.target.nextElementSibling.textContent = `${e.target.value}%`;
            });
        }
        
        // –¢–∏–ø—ã –∑–≤—É–∫–æ–≤
        const soundTypes = [
            'button-sounds', 'notification-sounds', 'interface-sounds',
            'success-sounds', 'error-sounds', 'warning-sounds'
        ];
        
        soundTypes.forEach(type => {
            const element = document.getElementById(type);
            if (element) {
                element.addEventListener('change', (e) => {
                    const settingKey = type.replace('-', '').replace('sounds', 'Sounds');
                    this.setSetting(settingKey, e.target.checked);
                });
            }
        });
        
        // –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
        const backgroundMusic = document.getElementById('background-music');
        if (backgroundMusic) {
            backgroundMusic.addEventListener('change', (e) => {
                this.setSetting('backgroundMusic', e.target.checked);
            });
        }
        
        const musicVolume = document.getElementById('music-volume');
        if (musicVolume) {
            musicVolume.addEventListener('input', (e) => {
                const volume = e.target.value / 100;
                this.setSetting('backgroundMusicVolume', volume);
                e.target.nextElementSibling.textContent = `${e.target.value}%`;
            });
        }
        
        // –ù–∞–±–æ—Ä –∑–≤—É–∫–æ–≤
        const soundPack = document.getElementById('sound-pack');
        if (soundPack) {
            soundPack.addEventListener('change', (e) => {
                this.setSetting('soundPack', e.target.value);
            });
        }
    }
    
    // –¢–µ—Å—Ç –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤
    testAllSounds() {
        if (!window.soundSystem || !this.settings.soundEnabled) {
            window.notifications?.warning('–ó–≤—É–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
            return;
        }
        
        const sounds = [
            { name: '–ö–Ω–æ–ø–∫–∞', method: 'playButton' },
            { name: '–£—Å–ø–µ—Ö', method: 'playSuccess' },
            { name: '–û—à–∏–±–∫–∞', method: 'playError' },
            { name: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', method: 'playWarning' },
            { name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', method: 'playInfo' }
        ];
        
        window.notifications?.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤...', 6000);
        
        sounds.forEach((sound, index) => {
            setTimeout(() => {
                if (window.soundSystem[sound.method]) {
                    window.soundSystem[sound.method]();
                    console.log(`–¢–µ—Å—Ç –∑–≤—É–∫–∞: ${sound.name}`);
                }
            }, index * 800);
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.soundSettings = new SoundSettings();