const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 10000;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
global.hasUpdate = false;
global.latestCommit = null;

// Middleware
app.use(express.json());
app.use(cors({
    origin: '*', // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    credentials: true
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// ===== –ö–û–†–ù–ï–í–û–ô –ú–ê–†–®–†–£–¢ =====
app.get('/', (req, res) => {
    res.json({ 
        status: 'running',
        timestamp: new Date().toISOString(),
        version: '1.0.0'
    });
});

// ===== WEBHOOK –û–¢ GITHUB =====
app.post('/api/webhooks/github', (req, res) => {
    console.log('üîî GitHub webhook –ø–æ–ª—É—á–µ–Ω!');
    console.log('Method:', req.method);
    console.log('URL:', req.url);
    console.log('Headers:', JSON.stringify(req.headers, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub —Å–æ–±—ã—Ç–∏—è
    const event = req.headers['x-github-event'];
    console.log('üìÖ GitHub Event:', event);
    
    try {
        if (event === 'push') {
            console.log('üìù Push —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
            console.log('Body:', JSON.stringify(req.body, null, 2));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ push –≤ main/master –≤–µ—Ç–∫—É
            if (req.body.ref === 'refs/heads/main' || req.body.ref === 'refs/heads/master') {
                console.log('üéØ Push –≤ main –≤–µ—Ç–∫—É!');
                
                const latestCommit = req.body.head_commit;
                if (latestCommit) {
                    console.log('üÜï –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç –Ω–∞–π–¥–µ–Ω:');
                    console.log('  SHA:', latestCommit.id.substring(0, 7));
                    console.log('  Message:', latestCommit.message);
                    console.log('  Author:', latestCommit.author.name);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    global.hasUpdate = true;
                    global.latestCommit = {
                        sha: latestCommit.id,
                        message: latestCommit.message,
                        author: {
                            name: latestCommit.author.name,
                            date: latestCommit.timestamp
                        },
                        url: latestCommit.url
                    };
                    
                    console.log('‚úÖ –§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
                    console.log('üîî –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ');
                } else {
                    console.log('‚ö†Ô∏è head_commit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ payload');
                }
            } else {
                console.log('‚ÑπÔ∏è Push –Ω–µ –≤ main –≤–µ—Ç–∫—É:', req.body.ref);
            }
        } else if (event === 'ping') {
            console.log('üèì Ping –æ—Ç GitHub - webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
        } else {
            console.log('‚ÑπÔ∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ push:', event);
        }
        
        res.status(200).json({ 
            received: true,
            event: event,
            hasUpdate: global.hasUpdate,
            timestamp: new Date().toISOString(),
            message: 'Webhook processed successfully'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(200).json({ // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã GitHub –Ω–µ —Å—á–∏—Ç–∞–ª –æ—à–∏–±–∫–æ–π
            received: true,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// ===== –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô =====
app.get('/api/updates/check', async (req, res) => {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log('  hasUpdate:', global.hasUpdate);
    console.log('  latestCommit:', global.latestCommit ? global.latestCommit.sha?.substring(0, 7) : 'none');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç webhook
        if (global.hasUpdate && global.latestCommit) {
            console.log('‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢ WEBHOOK!');
            console.log('üìù –ö–æ–º–º–∏—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', global.latestCommit.sha.substring(0, 7));
            
            const result = {
                success: true,
                hasUpdate: true,
                latestCommit: global.latestCommit,
                source: 'webhook',
                timestamp: new Date().toISOString()
            };
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            global.hasUpdate = false;
            console.log('üîÑ –§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É');
            
            res.json(result);
            return;
        }
        
        // –ï—Å–ª–∏ webhook –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback –Ω–∞ GitHub API (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
        console.log('üì° Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º GitHub API');
        
        const fetch = (await import('node-fetch')).default;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        const response = await fetch('https://api.github.com/repos/AmKilopa/RkM/commits?per_page=1', {
            headers: {
                'User-Agent': 'RkM-Backend/1.0',
                'Accept': 'application/vnd.github.v3+json'
            }
        });
        
        console.log('üìä GitHub API response:', response.status, response.statusText);
        
        if (response.status === 403) {
            console.log('‚ö†Ô∏è GitHub API rate limit exceeded');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            res.json({
                success: true,
                hasUpdate: false,
                error: 'GitHub API rate limit exceeded',
                source: 'github-api-limited',
                timestamp: new Date().toISOString()
            });
            return;
        }
        
        if (!response.ok) {
            throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);
        }
        
        const commits = await response.json();
        const latestCommit = commits[0];
        
        console.log('üìù GitHub API - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:', latestCommit.sha.substring(0, 7));
        
        res.json({
            success: true,
            hasUpdate: false, // –ë–µ–∑ webhook —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç
            latestCommit: {
                sha: latestCommit.sha,
                message: latestCommit.commit.message,
                author: {
                    name: latestCommit.commit.author.name,
                    date: latestCommit.commit.author.date
                }
            },
            source: 'github-api',
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        res.json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// ===== –ü–û–°–õ–ï–î–ù–ò–ô –ö–û–ú–ú–ò–¢ =====
app.get('/api/updates/latest-commit', async (req, res) => {
    console.log('üìù –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞');
    
    try {
        const fetch = (await import('node-fetch')).default;
        const response = await fetch('https://api.github.com/repos/AmKilopa/RkM/commits?per_page=1');
        
        if (!response.ok) {
            throw new Error(`GitHub API error: ${response.status}`);
        }
        
        const commits = await response.json();
        const latestCommit = commits[0];
        
        res.json({
            success: true,
            commit: {
                sha: latestCommit.sha,
                message: latestCommit.commit.message,
                author: {
                    name: latestCommit.commit.author.name,
                    date: latestCommit.commit.author.date
                },
                url: latestCommit.html_url
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞:', error);
        res.json({
            success: false,
            error: error.message
        });
    }
});

// ===== –°–¢–ê–¢–£–° –û–ë–ù–û–í–õ–ï–ù–ò–ô (–¥–ª—è –¥–µ–±–∞–≥–∞) =====
app.get('/api/updates/status', (req, res) => {
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    res.json({
        hasUpdate: global.hasUpdate,
        latestCommit: global.latestCommit,
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// ===== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) =====
app.post('/api/updates/force', (req, res) => {
    console.log('üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    
    global.hasUpdate = true;
    global.latestCommit = {
        sha: 'test' + Date.now(),
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
        author: {
            name: 'Test User',
            date: new Date().toISOString()
        },
        url: 'https://github.com/AmKilopa/RkM'
    };
    
    console.log('‚úÖ –§–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    res.json({
        success: true,
        message: 'Update flag set manually',
        hasUpdate: global.hasUpdate,
        latestCommit: global.latestCommit
    });
});

// ===== –°–ë–†–û–° –§–õ–ê–ì–ê (–¥–ª—è –¥–µ–±–∞–≥–∞) =====
app.post('/api/updates/reset', (req, res) => {
    console.log('üîÑ –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    
    global.hasUpdate = false;
    global.latestCommit = null;
    
    res.json({
        success: true,
        message: 'Update flag reset',
        hasUpdate: global.hasUpdate
    });
});

// ===== –ó–î–û–†–û–í–¨–ï –°–ï–†–í–ï–†–ê =====
app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy',
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
    });
});

// ===== CATCH-ALL =====
app.use('*', (req, res) => {
    res.status(404).json({ 
        error: 'Route not found',
        method: req.method,
        url: req.originalUrl
    });
});

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
app.listen(PORT, () => {
    console.log(`üöÄ Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê URL: https://rkm-9vui.onrender.com`);
    console.log(`üîî Webhook URL: https://rkm-9vui.onrender.com/api/webhooks/github`);
    console.log(`üì° Updates API: https://rkm-9vui.onrender.com/api/updates/check`);
});

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö =====
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('‚ùå Unhandled Rejection:', error);
});