// –í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Puppeteer
class SubstitutionService {
    constructor() {
        this.isRunning = false;
        this.currentProcess = null;
    }
    
    async start(steamId) {
        try {
            console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–º–µ–Ω—É –¥–ª—è Steam ID: ${steamId}`);
            
            if (this.isRunning) {
                return {
                    success: false,
                    error: '–ü–æ–¥–º–µ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
                };
            }

            this.isRunning = true;
            
            // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–º–µ–Ω—ã (–ø–æ–∫–∞ –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
            await this.simulateSubstitution(steamId);
            
            this.isRunning = false;
            
            return {
                success: true,
                message: '–ü–æ–¥–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)',
                steamId: steamId,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–º–µ–Ω—ã:', error);
            this.isRunning = false;
            
            return {
                success: false,
                error: error.message,
                steamId: steamId
            };
        }
    }
    
    async simulateSubstitution(steamId) {
        console.log('üìã –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Steam ID...');
        await this.delay(1000);
        
        console.log('üîê –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏...');
        await this.delay(1500);
        
        console.log('üåê –≠—Ç–∞–ø 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Steam...');
        await this.delay(2000);
        
        console.log('‚öôÔ∏è –≠—Ç–∞–ø 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—ã...');
        await this.delay(2500);
        
        console.log('‚úÖ –≠—Ç–∞–ø 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
        await this.delay(1000);
        
        console.log('üéâ –ü–æ–¥–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    }
    
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    getStatus() {
        return {
            isRunning: this.isRunning,
            currentProcess: this.currentProcess
        };
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    async stop() {
        if (this.isRunning) {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–º–µ–Ω—ã...');
            this.isRunning = false;
            this.currentProcess = null;
            return { success: true, message: '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' };
        }
        
        return { success: false, message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤' };
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è Steam ID
    validateSteamId(steamId) {
        if (!steamId || typeof steamId !== 'string') {
            return {
                valid: false,
                error: 'Steam ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            };
        }

        const cleaned = steamId.trim();

        // Steam64 ID (17 —Ü–∏—Ñ—Ä)
        if (/^[0-9]{17}$/.test(cleaned)) {
            return {
                valid: true,
                type: 'steam64',
                cleanId: cleaned
            };
        }

        // URL –ø—Ä–æ—Ñ–∏–ª—è
        const urlMatch = cleaned.match(/steamcommunity\.com\/profiles\/([0-9]{17})/);
        if (urlMatch) {
            return {
                valid: true,
                type: 'profile_url',
                cleanId: urlMatch[1]
            };
        }

        // Custom URL
        const customMatch = cleaned.match(/steamcommunity\.com\/id\/([a-zA-Z0-9_]+)/);
        if (customMatch) {
            return {
                valid: true,
                type: 'custom_url',
                cleanId: customMatch[1],
                note: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Steam64'
            };
        }

        return {
            valid: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Steam ID'
        };
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    getLogMessages() {
        return [
            { timestamp: new Date().toISOString(), type: 'info', message: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ' },
            { timestamp: new Date().toISOString(), type: 'warning', message: 'Puppeteer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏' }
        ];
    }
}

module.exports = new SubstitutionService();