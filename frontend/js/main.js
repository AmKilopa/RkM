// === –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
class App {
    constructor() {
        this.currentPage = 'home';
        this.updateCheckInterval = null;
        this.isUpdating = false;
        this.init();
    }
    
    init() {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞
        if (!window.api) {
            setTimeout(() => this.init(), 100);
            return;
        }
        
        this.clearApiCache();
        this.setupEventListeners();
        this.updateBugReportLink();
        this.startUpdateMonitoring();
        this.checkBackendStatus();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ RkM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ API –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    clearApiCache() {
        try {
            // –û—á–∏—â–∞–µ–º sessionStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const keysToRemove = [];
            for (let i = 0; i < sessionStorage.length; i++) {
                const key = sessionStorage.key(i);
                if (key && (key.includes('github') || key.includes('api'))) {
                    keysToRemove.push(key);
                }
            }
            keysToRemove.forEach(key => sessionStorage.removeItem(key));
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
    }
    
    setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.getElementById('inventory-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('inventory-btn')) {
                this.navigateTo('inventory');
            } else {
                this.showDisabledFeatureMessage('inventory');
            }
        });
        
        document.getElementById('friend-error-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('friend-error-btn')) {
                this.navigateTo('friend-error');
            } else {
                this.showDisabledFeatureMessage('friend-error');
            }
        });
        
        document.getElementById('substitution-btn')?.addEventListener('click', () => {
            this.navigateTo('substitution');
        });
        
        document.getElementById('changelog-btn')?.addEventListener('click', () => {
            this.showChangelog();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('back-btn')) {
                this.showHomePage();
            }
        });
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.showHomePage();
            }
            
            // Ctrl+R –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (e.ctrlKey && e.key === 'r') {
                e.preventDefault();
                this.checkForUpdates();
            }
        });
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (window.soundSystem) {
            setTimeout(() => {
                window.soundSystem.playInterface();
            }, 500);
        }
    }
    
    isDisabled(buttonId) {
        return document.getElementById(buttonId)?.classList.contains('disabled');
    }
    
    navigateTo(page) {
        this.currentPage = page;
        this.updateBugReportLink();
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (window.soundSystem) {
            window.soundSystem.playInterface();
        }
        
        switch (page) {
            case 'substitution':
                if (window.substitutionModule) {
                    window.substitutionModule.show();
                } else {
                    this.loadModule('substitution');
                }
                break;
            case 'inventory':
                if (window.inventoryModule) {
                    window.inventoryModule.show();
                } else {
                    this.loadModule('inventory');
                }
                break;
            case 'friend-error':
                if (window.friendErrorModule) {
                    window.friendErrorModule.show();
                } else {
                    this.loadModule('friend-error');
                }
                break;
            default:
                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}`);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    async loadModule(moduleName) {
        try {
            const script = document.createElement('script');
            script.src = `js/modules/${moduleName}.js`;
            script.onload = () => {
                console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∑–∞–≥—Ä—É–∂–µ–Ω`);
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                this.navigateTo(moduleName);
            };
            script.onerror = () => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}`);
                window.notifications?.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}`);
            };
            document.head.appendChild(script);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}:`, error);
            window.notifications?.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}`);
        }
    }
    
    showDisabledFeatureMessage(feature) {
        const messages = {
            'inventory': '–§—É–Ω–∫—Ü–∏—è "–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            'friend-error': '–§—É–Ω–∫—Ü–∏—è "Friend –æ—à–∏–±–∫–∞" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        };
        
        window.notifications?.warning(messages[feature] || '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        
        if (window.soundSystem) {
            window.soundSystem.playWarning();
        }
    }
    
    updateBugReportLink() {
        const bugBtn = document.getElementById('bug-report-btn');
        if (!bugBtn) return;
        
        const config = window.RkMConfig?.github;
        if (!config) return;
        
        const links = {
            'home': config.getIssueUrl('home'),
            'inventory': config.getIssueUrl('inventory'),
            'friend-error': config.getIssueUrl('friendError'),
            'substitution': config.getIssueUrl('substitution')
        };
        
        bugBtn.onclick = () => {
            window.open(links[this.currentPage], '_blank');
            if (window.soundSystem) {
                window.soundSystem.playInterface();
            }
        };
    }
    
    showHomePage() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π
        const pages = document.querySelectorAll('.page:not(#home-page)');
        pages.forEach(page => {
            page.style.opacity = '0';
            page.style.transform = 'translateY(-20px)';
            setTimeout(() => page.remove(), 300);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const homePage = document.getElementById('home-page');
        if (homePage) {
            homePage.classList.add('active');
            homePage.style.opacity = '1';
            homePage.style.transform = 'translateY(0)';
        }
        
        this.currentPage = 'home';
        this.updateBugReportLink();
        
        // –ó–≤—É–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if (window.soundSystem) {
            window.soundSystem.playInterface();
        }
    }
    
    showChangelog() {
        if (window.changelogModule) {
            window.changelogModule.show();
        } else {
            window.notifications?.error('–ú–æ–¥—É–ª—å –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        if (window.soundSystem) {
            window.soundSystem.playInterface();
        }
    }
    
    startUpdateMonitoring() {
        try {
            const oldCommit = localStorage.getItem('rkm_last_commit');
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const checkInterval = window.RkMConfig?.intervals?.updateCheck || 30000;
        this.updateCheckInterval = setInterval(() => {
            this.checkForUpdates();
        }, checkInterval);
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            this.checkForUpdates();
        }, 2000);
        
        console.log(`üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${checkInterval/1000}—Å)`);
    }
    
    async checkForUpdates() {
        if (this.isUpdating) {
            return;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ backend
            const result = await window.api.checkForUpdates();
            
            if (result && result.success && result.hasUpdate) {
                console.log('üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                try {
                    localStorage.setItem('rkm_update_detected', JSON.stringify({
                        timestamp: new Date().toISOString(),
                        commit: result.latestCommit
                    }));
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage
                }
                
                this.handleNewUpdate(result.latestCommit);
                return;
            }
            
        } catch (error) {
            // –ï—Å–ª–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ GitHub
            if (error.message.includes('404')) {
                await this.checkForUpdatesGitHub();
                return;
            }
            
            // –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö backend —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (this.updateCheckInterval) {
                clearInterval(this.updateCheckInterval);
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            this.updateCheckInterval = setInterval(() => {
                this.checkForUpdates();
            }, 900000); // 15 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ backend, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback —Ä–µ–∂–∏–º');
        }
    }
    
    // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GitHub (–µ—Å–ª–∏ API –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    async checkForUpdatesGitHub() {
        const config = window.RkMConfig?.github;
        if (!config) {
            return;
        }
        
        try {
            const timestamp = Date.now();
            const randomParam = Math.random().toString(36).substring(7);
            const url = `${config.apiUrl}/commits?per_page=1&_t=${timestamp}&_r=${randomParam}`;
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/vnd.github.v3+json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                },
                cache: 'no-store'
            });
            
            if (response.status === 403) {
                console.warn('‚ö†Ô∏è GitHub API –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω');
                return;
            }
            
            if (response.status === 404) {
                console.warn('‚ö†Ô∏è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            if (!response.ok) {
                throw new Error(`GitHub API error: ${response.status}`);
            }
            
            const commits = await response.json();
            
            if (commits && commits[0]) {
                const latestCommit = commits[0];
                
                let storedCommit = null;
                try {
                    storedCommit = localStorage.getItem('rkm_last_commit');
                } catch (e) {
                    storedCommit = sessionStorage.getItem('rkm_last_commit');
                }
                
                if (storedCommit && storedCommit !== latestCommit.sha) {
                    console.log('üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ GitHub!');
                    this.handleNewUpdate(latestCommit);
                    return;
                } else if (!storedCommit) {
                    try {
                        localStorage.setItem('rkm_last_commit', latestCommit.sha);
                    } catch (e) {
                        sessionStorage.setItem('rkm_last_commit', latestCommit.sha);
                    }
                }
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ GitHub:', error.message);
        }
    }
    
    handleNewUpdate(commit) {
        this.isUpdating = true;
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.updateCheckInterval) {
            clearInterval(this.updateCheckInterval);
            this.updateCheckInterval = null;
        }
        
        this.showUpdateWarning(() => {
            this.showUpdatePage(commit);
        });
    }
    
    showUpdateWarning(callback) {
        let countdown = 5;
        
        const notificationId = window.notifications?.show(
            this.createCountdownHTML(countdown),
            'warning',
            0 // –ù–µ –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        );
        
        // –ó–≤—É–∫–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (window.soundSystem) {
            window.soundSystem.playWarning();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const timer = setInterval(() => {
            countdown--;
            
            const notification = document.getElementById(notificationId);
            if (notification) {
                const textEl = notification.querySelector('.notification-text');
                if (textEl) {
                    textEl.innerHTML = this.createCountdownHTML(countdown);
                }
            }
            
            if (countdown <= 0) {
                clearInterval(timer);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (notificationId) {
                    window.notifications?.hide(notificationId);
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º callback
                callback();
            }
        }, 1000);
    }
    
    createCountdownHTML(seconds) {
        return `
            <div style="text-align: center; font-size: 1.1rem;">
                <div style="font-weight: bold; margin-bottom: 8px;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</div>
                <div style="color: #ccc; margin-bottom: 8px;">–°–∞–π—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑:</div>
                <div style="font-size: 2rem; color: #ffc107; font-weight: bold; margin: 8px 0;">${seconds}</div>
                <div style="color: #888; font-size: 0.9rem;">–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</div>
            </div>
        `;
    }
    
    showUpdatePage(commit) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç
        const commitSha = commit.sha || commit.id || 'unknown';
        try {
            localStorage.setItem('rkm_last_commit', commitSha);
        } catch (e) {
            sessionStorage.setItem('rkm_last_commit', commitSha);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–∞ –æ—Ç backend
        const commitMessage = commit.commit?.message || commit.message || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç backend';
        const authorName = commit.commit?.author?.name || commit.author?.name || 'Backend';
        const authorDate = commit.commit?.author?.date || commit.author?.date || new Date().toISOString();
        const shortSha = commitSha.substring(0, 7);
        
        document.body.innerHTML = `
            <button onclick="window.open('${window.RkMConfig?.github?.getIssueUrl('home') || '#'}', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <div id="notifications-container" class="notifications-container"></div>
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page update-page">
                <div class="main-container">
                    <div class="status-icon rotating">üîÑ</div>
                    <h1 class="main-title">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</h1>
                    <p class="update-message">–ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...</p>
                    
                    <div class="commit-info">
                        <h3>üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:</h3>
                        <div class="commit-message">${commitMessage}</div>
                        <div class="commit-details">
                            <span class="commit-author">üë§ ${authorName}</span>
                            <span class="commit-date">üìÖ ${new Date(authorDate).toLocaleString('ru')}</span>
                        </div>
                        <div class="commit-sha">#${shortSha}</div>
                    </div>
                    
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p class="loading-text">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ...</p>
                        <p style="font-size: 0.9rem; color: #888; margin-top: 0.5rem;">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ</p>
                    </div>
                    
                    <div class="auto-refresh">
                        –°–∞–π—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ <span id="countdown">30</span> —Å–µ–∫—É–Ω–¥
                    </div>
                </div>
            </div>
        `;
        
        this.reinitializeModules();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—É—é –º–µ–ª–æ–¥–∏—é
        let melodyIntervalId = null;
        if (window.soundSystem && window.soundSystem.startLoopingUpdateMelody) {
            melodyIntervalId = window.soundSystem.startLoopingUpdateMelody();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä
        this.startSimpleCountdown(30, melodyIntervalId);
    }
    
    // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    testUpdateSystem() {
        const fakeCommit = {
            sha: 'test1234567890abcdef',
            commit: {
                message: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ backend',
                author: {
                    name: 'Backend Test',
                    date: new Date().toISOString()
                }
            }
        };
        
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        this.handleNewUpdate(fakeCommit);
    }
    
    startSimpleCountdown(seconds, melodyIntervalId = null) {
        let remaining = seconds;
        const countdownEl = document.getElementById('countdown');
        
        const timer = setInterval(() => {
            remaining--;
            if (countdownEl) {
                countdownEl.textContent = remaining;
            }
            
            if (remaining <= 0) {
                clearInterval(timer);
                
                if (melodyIntervalId && window.soundSystem) {
                    window.soundSystem.stopLoopingMelody(melodyIntervalId);
                }
                
                window.location.reload();
            }
        }, 1000);
    }
    
    async checkBackendStatus() {
        try {
            const connected = await window.api.testConnection();
            if (!connected) {
                console.log('üî¥ Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                this.showOfflinePage();
            } else {
                console.log('üü¢ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            console.log('üî¥ Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            this.showOfflinePage();
        }
    }
    
    showOfflinePage() {
        const config = window.RkMConfig?.github;
        const helpUrl = config ? config.getIssueUrl('helpBackend') : 'https://github.com/AmKilopa/RkM/issues/new?title=HBR';
        
        document.body.innerHTML = `
            <button onclick="window.open('${config ? config.getIssueUrl('home') : '#'}', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <div id="notifications-container" class="notifications-container"></div>
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page offline-page">
                <div class="main-container">
                    <div class="status-icon pulsing">üì°</div>
                    <h1 class="main-title">–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>
                    <p class="offline-message">Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</p>
                    
                    <div class="commit-info">
                        <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
                        <div class="commit-message">–û–∂–∏–¥–∞–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç</div>
                        <div class="commit-details">
                            <span>–ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ–ª–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É</span>
                        </div>
                    </div>
                    
                    <div class="buttons-container">
                        <button onclick="window.location.reload()" class="main-btn">
                            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                        <button onclick="window.open('${helpUrl}', '_blank')" class="main-btn">
                            üìù –ü–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É
                        </button>
                    </div>
                    
                    <div class="status-indicator">
                        <div class="pulse-dot offline"></div>
                        <span>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥</span>
                    </div>
                </div>
            </div>
        `;
        
        this.reinitializeModules();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è backend
        const retryInterval = window.RkMConfig?.intervals?.offlineRetry || 10000;
        setInterval(async () => {
            const connected = await window.api.testConnection();
            if (connected) {
                console.log('üü¢ Backend –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                window.location.reload();
            }
        }, retryInterval);
    }
    
    reinitializeModules() {
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
        setTimeout(() => {
            if (window.notifications) {
                window.notifications.updateContainer();
            }
            if (window.modals) {
                window.modals.setupEventListeners();
            }
            if (window.buttonSounds) {
                window.buttonSounds.refreshBindings();
            }
        }, 100);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
    debug() {
        return {
            currentPage: this.currentPage,
            isUpdating: this.isUpdating,
            updateCheckInterval: this.updateCheckInterval,
            testUpdate: () => this.testUpdateSystem(),
            checkUpdates: () => this.checkForUpdates(),
            goHome: () => this.showHomePage()
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new App();
    
    // –î–æ–±–∞–≤–ª—è–µ–º debug –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (window.RkMConfig?.isDevelopment()) {
        window.debugApp = () => window.app.debug();
        console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ debugApp() –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
    }
});