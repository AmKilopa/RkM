const axios = require('axios');

class SystemValidator {
    constructor() {
        this.timeout = parseInt(process.env.SYSTEM_CHECK_TIMEOUT) || 10000;
        this.testUrl = process.env.TEST_URL || 'https://google.com';
    }

    async checkAll() {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');
        const issues = [];
        const results = {};

        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏
            const nodeCheck = this.checkNodeVersion();
            results.node = nodeCheck;
            if (!nodeCheck.success) {
                issues.push({
                    name: 'Node.js –≤–µ—Ä—Å–∏—è',
                    description: `–¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18+, —Ç–µ–∫—É—â–∞—è: ${nodeCheck.version}`,
                    downloadUrl: 'https://nodejs.org/en/download/'
                });
            }

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const internetCheck = await this.checkInternet();
            results.internet = internetCheck;
            if (!internetCheck.success) {
                issues.push({
                    name: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
                    description: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
                    downloadUrl: ''
                });
            }

            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ TradeIt API
            const tradeitCheck = await this.checkTradeItAPI();
            results.tradeit = tradeitCheck;
            if (!tradeitCheck.success) {
                issues.push({
                    name: 'TradeIt API',
                    description: 'API TradeIt –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    downloadUrl: ''
                });
            }

            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            const resourcesCheck = this.checkSystemResources();
            results.resources = resourcesCheck;

            // 5. –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Chrome (–ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Puppeteer)
            results.chrome = { 
                success: true, 
                note: 'Puppeteer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞' 
            };

            console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`);
            
            return {
                success: issues.length === 0,
                issues: issues,
                details: results,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
            return {
                success: false,
                issues: [{
                    name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
                    description: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
                    downloadUrl: ''
                }],
                details: results,
                timestamp: new Date().toISOString()
            };
        }
    }

    checkNodeVersion() {
        try {
            const version = process.version;
            const majorVersion = parseInt(version.slice(1).split('.')[0]);
            
            return {
                success: majorVersion >= 18,
                version: version,
                major: majorVersion
            };
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    async checkInternet() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
            
            const start = Date.now();
            const response = await axios.get('https://www.google.com', {
                timeout: this.timeout,
                headers: {
                    'User-Agent': 'RkM-SystemCheck/1.0'
                }
            });
            const responseTime = Date.now() - start;

            console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (${responseTime}ms)`);
            return {
                success: response.status === 200,
                responseTime: responseTime,
                status: response.status
            };
        } catch (error) {
            console.error('‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
            return {
                success: false,
                error: `–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`
            };
        }
    }

    async checkTradeItAPI() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TradeIt API...');
            
            // –¢–µ—Å—Ç–æ–≤—ã–π Steam ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            const testSteamId = '76561198000000000';
            const apiUrl = `https://tradeit.gg/api/v2/inventory/search?steamId=${testSteamId}`;
            
            const start = Date.now();
            const response = await axios.get(apiUrl, {
                timeout: this.timeout,
                headers: {
                    'User-Agent': 'RkM-SystemCheck/1.0'
                }
            });
            const responseTime = Date.now() - start;

            console.log(`‚úÖ TradeIt API –¥–æ—Å—Ç—É–ø–µ–Ω (${responseTime}ms)`);
            return {
                success: true,
                responseTime: responseTime,
                status: response.status
            };
        } catch (error) {
            console.error('‚ùå TradeIt API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            return {
                success: false,
                error: `TradeIt API –æ—à–∏–±–∫–∞: ${error.message}`
            };
        }
    }

    checkSystemResources() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');
            
            const freeMemory = process.memoryUsage();
            const totalMemory = require('os').totalmem();
            const freeMemoryMB = Math.round(freeMemory.external / 1024 / 1024);
            const totalMemoryMB = Math.round(totalMemory / 1024 / 1024);
            
            const hasEnoughMemory = totalMemoryMB > 512; // –ú–∏–Ω–∏–º—É–º 512MB
            
            console.log(`üíæ –ü–∞–º—è—Ç—å: ${freeMemoryMB}MB / ${totalMemoryMB}MB`);
            
            return {
                success: hasEnoughMemory,
                memory: {
                    free: freeMemoryMB,
                    total: totalMemoryMB
                }
            };
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = new SystemValidator();