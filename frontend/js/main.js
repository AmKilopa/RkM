// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
class App {
    constructor() {
        this.currentPage = 'home';
        this.updateCheckInterval = null;
        this.isUpdating = false;
        this.init();
    }
    
    init() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        
        // –û—á–∏—â–∞–µ–º –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è GitHub API
        this.clearApiCache();
        
        this.setupEventListeners();
        this.updateBugReportLink();
        this.startUpdateMonitoring();
        this.checkBackendStatus();
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ API –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    clearApiCache() {
        try {
            // –û—á–∏—â–∞–µ–º sessionStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const keysToRemove = [];
            for (let i = 0; i < sessionStorage.length; i++) {
                const key = sessionStorage.key(i);
                if (key && key.includes('github') || key && key.includes('api')) {
                    keysToRemove.push(key);
                }
            }
            keysToRemove.forEach(key => sessionStorage.removeItem(key));
            
            console.log('üßπ –ö–µ—à API –æ—á–∏—â–µ–Ω');
        } catch (e) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à:', e.message);
        }
    }
    
    setupEventListeners() {
        document.getElementById('inventory-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('inventory-btn')) {
                this.navigateTo('inventory');
            }
        });
        
        document.getElementById('friend-error-btn')?.addEventListener('click', () => {
            if (!this.isDisabled('friend-error-btn')) {
                this.navigateTo('friend-error');
            }
        });
        
        document.getElementById('substitution-btn')?.addEventListener('click', () => {
            this.navigateTo('substitution');
        });
        
        document.getElementById('changelog-btn')?.addEventListener('click', () => {
            this.showChangelog();
        });
    }
    
    isDisabled(buttonId) {
        return document.getElementById(buttonId)?.classList.contains('disabled');
    }
    
    navigateTo(page) {
        this.currentPage = page;
        this.updateBugReportLink();
        
        if (page === 'substitution') {
            window.substitutionModule.show();
        }
    }
    
    updateBugReportLink() {
        const bugBtn = document.getElementById('bug-report-btn');
        if (!bugBtn) return;
        
        const config = window.RkMConfig?.github;
        if (!config) return;
        
        const links = {
            'home': config.getIssueUrl('home'),
            'inventory': config.getIssueUrl('inventory'),
            'friend-error': config.getIssueUrl('friendError'),
            'substitution': config.getIssueUrl('substitution')
        };
        
        bugBtn.onclick = () => window.open(links[this.currentPage], '_blank');
    }
    
    showHomePage() {
        const pages = document.querySelectorAll('.page:not(#home-page)');
        pages.forEach(page => page.remove());
        
        const homePage = document.getElementById('home-page');
        if (homePage) {
            homePage.classList.add('active');
        }
        
        this.currentPage = 'home';
        this.updateBugReportLink();
    }
    
    showChangelog() {
        if (window.changelogModule) {
            window.changelogModule.show();
        } else {
            window.notifications?.error('–ú–æ–¥—É–ª—å –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    startUpdateMonitoring() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        console.log('üîó Backend URL:', window.api?.baseUrl || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        
        // –û—á–∏—â–∞–µ–º localStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        try {
            const oldCommit = localStorage.getItem('rkm_last_commit');
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ backend, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:', oldCommit ? oldCommit.substring(0, 7) : 'none');
        } catch (e) {
            console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —á–µ—Ä–µ–∑ backend
        this.updateCheckInterval = setInterval(() => {
            this.checkForUpdates();
        }, 300000); // 5 –º–∏–Ω—É—Ç
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.checkForUpdates();
        }, 10000);
        
        console.log('‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ backend –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ø–µ—Ä–≤–∞—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥');
    }
    
    async checkForUpdates() {
        if (this.isUpdating) {
            console.log('üîÑ –£–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
            return;
        }
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ backend...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ backend –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ GitHub
            const result = await window.api.checkForUpdates();
            
            console.log('üìä –û—Ç–≤–µ—Ç backend:', result);
            
            if (result.success && result.hasUpdate) {
                console.log('üÜï BACKEND –°–û–û–ë–©–ê–ï–¢ –û –ù–û–í–û–ú –û–ë–ù–û–í–õ–ï–ù–ò–ò!');
                console.log('üìù –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç:', result.latestCommit);
                
                this.handleNewUpdate(result.latestCommit);
                return;
            } else if (result.success) {
                console.log('‚úÖ –ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç');
            } else {
                console.log('‚ö†Ô∏è Backend –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result.error);
            }
            
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ backend:', error.message);
            
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ backend —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (this.updateCheckInterval) {
                clearInterval(this.updateCheckInterval);
            }
            
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ backend');
            this.updateCheckInterval = setInterval(() => {
                this.checkForUpdates();
            }, 900000); // 15 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        }
    }
    
    handleNewUpdate(commit) {
        console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–¶–ï–î–£–†–£ –û–ë–ù–û–í–õ–ï–ù–ò–Ø (–¥–∞–Ω–Ω—ã–µ –æ—Ç backend)');
        console.log('üìù –ö–æ–º–º–∏—Ç:', commit.sha?.substring(0, 7) || 'unknown', '-', commit.commit?.message || commit.message || 'no message');
        
        this.isUpdating = true;
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.updateCheckInterval) {
            clearInterval(this.updateCheckInterval);
            this.updateCheckInterval = null;
            console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        
        console.log('‚è∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ...');
        
        this.showUpdateWarning(() => {
            console.log('‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            this.showUpdatePage(commit);
        });
    }
    
    showUpdateWarning(callback) {
        console.log('‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
        
        let countdown = 5;
        
        const notificationId = window.notifications?.show(
            this.createCountdownHTML(countdown),
            'warning',
            0 // –ù–µ –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        );
        
        console.log('üì¢ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationId);
        
        // –ó–≤—É–∫–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (window.soundSystem) {
            console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
            window.soundSystem.playWarning();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const timer = setInterval(() => {
            countdown--;
            console.log('‚è∞ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç:', countdown);
            
            const notification = document.getElementById(notificationId);
            if (notification) {
                const textEl = notification.querySelector('.notification-text');
                if (textEl) {
                    textEl.innerHTML = this.createCountdownHTML(countdown);
                }
            } else {
                console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
            }
            
            if (countdown <= 0) {
                clearInterval(timer);
                console.log('‚è∞ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
                
                // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (notificationId) {
                    window.notifications?.hide(notificationId);
                    console.log('üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ');
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º callback
                console.log('‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º callback');
                callback();
            }
        }, 1000);
    }
    
    createCountdownHTML(seconds) {
        return `
            <div style="text-align: center; font-size: 1.1rem;">
                <div style="font-weight: bold; margin-bottom: 8px;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</div>
                <div style="color: #ccc; margin-bottom: 8px;">–°–∞–π—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑:</div>
                <div style="font-size: 2rem; color: #ffc107; font-weight: bold; margin: 8px 0;">${seconds}</div>
                <div style="color: #888; font-size: 0.9rem;">–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</div>
            </div>
        `;
    }
    
    showUpdatePage(commit) {
        console.log('üìÑ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ –æ—Ç backend)');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç
        const commitSha = commit.sha || commit.id || 'unknown';
        try {
            localStorage.setItem('rkm_last_commit', commitSha);
            console.log('üíæ –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        } catch (e) {
            sessionStorage.setItem('rkm_last_commit', commitSha);
            console.log('üíæ –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ sessionStorage (fallback)');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–∞ –æ—Ç backend
        const commitMessage = commit.commit?.message || commit.message || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç backend';
        const authorName = commit.commit?.author?.name || commit.author?.name || 'Backend';
        const authorDate = commit.commit?.author?.date || commit.author?.date || new Date().toISOString();
        const shortSha = commitSha.substring(0, 7);
        
        document.body.innerHTML = `
            <button onclick="window.open('https://github.com/AmKilopa/RkM/issues/new?title=HPR', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <div id="notifications-container" class="notifications-container"></div>
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page update-page">
                <div class="main-container">
                    <div class="status-icon rotating">üîÑ</div>
                    <h1 class="main-title">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞</h1>
                    <p class="update-message">üéµ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...</p>
                    
                    <div class="commit-info">
                        <h3>üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:</h3>
                        <div class="commit-message">${commitMessage}</div>
                        <div class="commit-details">
                            <span class="commit-author">üë§ ${authorName}</span>
                            <span class="commit-date">üìÖ ${new Date(authorDate).toLocaleString('ru')}</span>
                        </div>
                        <div class="commit-sha">#${shortSha}</div>
                    </div>
                    
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p class="loading-text">–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º–µ–ª–æ–¥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...</p>
                        <p style="font-size: 0.9rem; color: #888; margin-top: 0.5rem;">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ backend</p>
                    </div>
                    
                    <div class="auto-refresh">
                        üéµ –°–∞–π—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ <span id="countdown">30</span> —Å–µ–∫—É–Ω–¥
                    </div>
                </div>
            </div>
        `;
        
        console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏');
        this.reinitializeModules();
        
        // –°–†–ê–ó–£ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—É—é –º–µ–ª–æ–¥–∏—é
        let melodyIntervalId = null;
        if (window.soundSystem) {
            console.log('üéµ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—É—é –º–µ–ª–æ–¥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            melodyIntervalId = window.soundSystem.startLoopingUpdateMelody();
        } else {
            console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä
        console.log('‚è≤Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
        this.startSimpleCountdown(30, melodyIntervalId);
    }
    
    // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    testUpdateSystem() {
        console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø (—á–µ—Ä–µ–∑ backend)');
        
        const fakeCommit = {
            sha: 'test1234567890abcdef',
            commit: {
                message: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ backend',
                author: {
                    name: 'Backend Test',
                    date: new Date().toISOString()
                }
            }
        };
        
        this.handleNewUpdate(fakeCommit);
    }
    
    startSimpleCountdown(seconds, melodyIntervalId = null) {
        let remaining = seconds;
        const countdownEl = document.getElementById('countdown');
        
        const timer = setInterval(() => {
            remaining--;
            if (countdownEl) {
                countdownEl.textContent = remaining;
            }
            
            if (remaining <= 0) {
                clearInterval(timer);
                
                if (melodyIntervalId && window.soundSystem) {
                    window.soundSystem.stopLoopingMelody(melodyIntervalId);
                }
                
                console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                window.location.reload();
            }
        }, 1000);
    }
    
    async checkBackendStatus() {
        console.log('üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å backend:', window.api?.baseUrl || 'URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        
        try {
            const connected = await window.api.testConnection();
            if (!connected) {
                console.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                this.showOfflinePage();
            } else {
                console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ backend:', error.message);
            this.showOfflinePage();
        }
    }
    
    showOfflinePage() {
        const config = window.RkMConfig?.github;
        const helpUrl = config ? config.getIssueUrl('helpBackend') : 'https://github.com/AmKilopa/RkM/issues/new?title=HBR';
        
        console.log('üì¥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É (backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
        
        document.body.innerHTML = `
            <button onclick="window.open('${config ? config.getIssueUrl('home') : '#'}', '_blank')" class="bug-report-btn">üêõ –ù–∞—à—ë–ª –±–∞–≥</button>
            <button onclick="window.changelogModule?.show()" class="changelog-btn">üìã –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</button>
            
            <div id="notifications-container" class="notifications-container"></div>
            <div id="modal-overlay" class="modal-overlay"></div>
            
            <div class="status-page offline-page">
                <div class="main-container">
                    <h1 class="main-title">üì° –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>
                    <p class="offline-message">Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</p>
                    
                    <div class="offline-content">
                        <div class="offline-info">
                            <p>Backend: https://rkm-9vui.onrender.com</p>
                            <p>–ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ–ª–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É</p>
                        </div>
                        
                        <div class="buttons-container">
                            <button onclick="window.location.reload()" class="main-btn">
                                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                            <button onclick="window.open('${helpUrl}', '_blank')" class="main-btn">
                                üìù –ü–æ–¥–∞—Ç—å –ø—Ä–æ—Å—å–±—É
                            </button>
                        </div>
                    </div>
                    
                    <div class="status-indicator">
                        <div class="pulse-dot offline"></div>
                        <span>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥</span>
                    </div>
                </div>
            </div>
        `;
        
        this.reinitializeModules();
        
        setInterval(async () => {
            console.log('üîÑ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ backend...');
            const connected = await window.api.testConnection();
            if (connected) {
                console.log('‚úÖ Backend –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                window.location.reload();
            }
        }, 10000);
    }
    
    reinitializeModules() {
        if (window.notifications) {
            window.notifications.updateContainer();
        }
        if (window.modals) {
            window.modals.setupEventListeners();
        }
        if (window.buttonSounds) {
            window.buttonSounds.addSoundsToButtons();
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    window.app = new App();
    console.log('üöÄ RkM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    console.log('üîó Backend: https://rkm-9vui.onrender.com');
    console.log('üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: window.app.testUpdateSystem()');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üåê –ë—Ä–∞—É–∑–µ—Ä:', navigator.userAgent);
    console.log('üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ localStorage:', typeof(Storage) !== "undefined");
});